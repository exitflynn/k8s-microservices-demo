* 
* ==> Audit <==
* |------------|--------------------------------------|----------|-------|---------|---------------------|---------------------|
|  Command   |                 Args                 | Profile  | User  | Version |     Start Time      |      End Time       |
|------------|--------------------------------------|----------|-------|---------|---------------------|---------------------|
| start      |                                      | minikube | flynn | v1.32.0 | 29 Nov 23 07:18 IST |                     |
| start      |                                      | minikube | flynn | v1.32.0 | 29 Nov 23 07:21 IST |                     |
| start      |                                      | minikube | flynn | v1.32.0 | 29 Nov 23 07:24 IST |                     |
| start      |                                      | minikube | flynn | v1.32.0 | 29 Nov 23 07:24 IST | 29 Nov 23 07:28 IST |
| cache      | add                                  | minikube | flynn | v1.32.0 | 29 Nov 23 21:18 IST |                     |
|            | exitflynn/basic-cdn-microservice:dev |          |       |         |                     |                     |
| cache      | add exitflynn:dev                    | minikube | flynn | v1.32.0 | 29 Nov 23 21:20 IST |                     |
| image      | load                                 | minikube | flynn | v1.32.0 | 29 Nov 23 21:21 IST |                     |
|            | exitflynn/basic-cdn-microservice:dev |          |       |         |                     |                     |
| image      | load                                 | minikube | flynn | v1.32.0 | 29 Nov 23 21:22 IST | 29 Nov 23 21:23 IST |
|            | exitflynn/basic-cdn-microservice:dev |          |       |         |                     |                     |
| image      | load                                 | minikube | flynn | v1.32.0 | 29 Nov 23 21:31 IST | 29 Nov 23 21:32 IST |
|            | exitflynn/basic-cdn-microservice:dev |          |       |         |                     |                     |
| docker-env |                                      | minikube | flynn | v1.32.0 | 30 Nov 23 08:33 IST |                     |
| docker-env |                                      | minikube | flynn | v1.32.0 | 30 Nov 23 08:34 IST |                     |
| docker-env |                                      | minikube | flynn | v1.32.0 | 30 Nov 23 08:35 IST |                     |
|------------|--------------------------------------|----------|-------|---------|---------------------|---------------------|

* 
* ==> Last Start <==
* Log file created at: 2023/11/29 07:24:37
Running on machine: chibacityblues
Binary: Built with gc go1.21.3 for linux/amd64
Log line format: [IWEF]mmdd hh:mm:ss.uuuuuu threadid file:line] msg
I1129 07:24:37.822971   31296 out.go:296] Setting OutFile to fd 1 ...
I1129 07:24:37.823135   31296 out.go:348] isatty.IsTerminal(1) = true
I1129 07:24:37.823141   31296 out.go:309] Setting ErrFile to fd 2...
I1129 07:24:37.823151   31296 out.go:348] isatty.IsTerminal(2) = true
I1129 07:24:37.823366   31296 root.go:338] Updating PATH: /home/flynn/.minikube/bin
W1129 07:24:37.823490   31296 root.go:314] Error reading config file at /home/flynn/.minikube/config/config.json: open /home/flynn/.minikube/config/config.json: no such file or directory
I1129 07:24:37.823829   31296 out.go:303] Setting JSON to false
I1129 07:24:37.825579   31296 start.go:128] hostinfo: {"hostname":"chibacityblues","uptime":37636,"bootTime":1701185242,"procs":260,"os":"linux","platform":"arch","platformFamily":"arch","platformVersion":"rolling","kernelVersion":"6.6.1-arch1-1","kernelArch":"x86_64","virtualizationSystem":"kvm","virtualizationRole":"host","hostId":"00dc879c-29c1-4b1f-b024-0d687836b1f7"}
I1129 07:24:37.825647   31296 start.go:138] virtualization: kvm host
I1129 07:24:37.871538   31296 out.go:177] 😄  minikube v1.32.0 on Arch rolling
I1129 07:24:37.916679   31296 notify.go:220] Checking for updates...
W1129 07:24:37.916806   31296 preload.go:295] Failed to list preload files: open /home/flynn/.minikube/cache/preloaded-tarball: no such file or directory
I1129 07:24:37.917122   31296 driver.go:378] Setting default libvirt URI to qemu:///system
I1129 07:24:37.917168   31296 global.go:111] Querying for installed drivers using PATH=/home/flynn/.minikube/bin:/usr/local/sbin:/usr/local/bin:/usr/bin:/usr/bin/site_perl:/usr/bin/vendor_perl:/usr/bin/core_perl
I1129 07:24:37.917186   31296 global.go:122] ssh default: false priority: 4, state: {Installed:true Healthy:true Running:false NeedsImprovement:false Error:<nil> Reason: Fix: Doc: Version:}
I1129 07:24:37.917269   31296 global.go:122] kvm2 default: true priority: 8, state: {Installed:false Healthy:false Running:false NeedsImprovement:false Error:exec: "virsh": executable file not found in $PATH Reason: Fix:Install libvirt Doc:https://minikube.sigs.k8s.io/docs/reference/drivers/kvm2/ Version:}
I1129 07:24:37.917323   31296 global.go:122] qemu2 default: true priority: 7, state: {Installed:false Healthy:false Running:false NeedsImprovement:false Error:exec: "qemu-system-x86_64": executable file not found in $PATH Reason: Fix:Install qemu-system Doc:https://minikube.sigs.k8s.io/docs/reference/drivers/qemu/ Version:}
I1129 07:24:37.917403   31296 global.go:122] virtualbox default: true priority: 6, state: {Installed:false Healthy:false Running:false NeedsImprovement:false Error:unable to find VBoxManage in $PATH Reason: Fix:Install VirtualBox Doc:https://minikube.sigs.k8s.io/docs/reference/drivers/virtualbox/ Version:}
I1129 07:24:37.917448   31296 global.go:122] vmware default: false priority: 5, state: {Installed:false Healthy:false Running:false NeedsImprovement:false Error:exec: "vmrun": executable file not found in $PATH Reason: Fix:Install vmrun Doc:https://minikube.sigs.k8s.io/docs/reference/drivers/vmware/ Version:}
I1129 07:24:37.945728   31296 docker.go:122] docker version: linux-24.0.7:
I1129 07:24:37.945849   31296 cli_runner.go:164] Run: docker system info --format "{{json .}}"
I1129 07:24:37.974495   31296 info.go:266] docker info: {ID:0380fbb9-23a0-4988-959d-aeff4f9ed66b Containers:0 ContainersRunning:0 ContainersPaused:0 ContainersStopped:0 Images:0 Driver:overlay2 DriverStatus:[[Backing Filesystem extfs] [Supports d_type true] [Using metacopy true] [Native Overlay Diff false] [userxattr false]] SystemStatus:<nil> Plugins:{Volume:[local] Network:[bridge host ipvlan macvlan null overlay] Authorization:<nil> Log:[awslogs fluentd gcplogs gelf journald json-file local logentries splunk syslog]} MemoryLimit:true SwapLimit:true KernelMemory:false KernelMemoryTCP:false CPUCfsPeriod:true CPUCfsQuota:true CPUShares:true CPUSet:true PidsLimit:true IPv4Forwarding:true BridgeNfIptables:true BridgeNfIP6Tables:true Debug:false NFd:23 OomKillDisable:false NGoroutines:37 SystemTime:2023-11-29 07:24:37.961942844 +0530 IST LoggingDriver:json-file CgroupDriver:systemd NEventsListener:0 KernelVersion:6.6.1-arch1-1 OperatingSystem:EndeavourOS OSType:linux Architecture:x86_64 IndexServerAddress:https://index.docker.io/v1/ RegistryConfig:{AllowNondistributableArtifactsCIDRs:[] AllowNondistributableArtifactsHostnames:[] InsecureRegistryCIDRs:[127.0.0.0/8] IndexConfigs:{DockerIo:{Name:docker.io Mirrors:[] Secure:true Official:true}} Mirrors:[]} NCPU:8 MemTotal:7212912640 GenericResources:<nil> DockerRootDir:/var/lib/docker HTTPProxy: HTTPSProxy: NoProxy: Name:chibacityblues Labels:[] ExperimentalBuild:false ServerVersion:24.0.7 ClusterStore: ClusterAdvertise: Runtimes:{Runc:{Path:runc}} DefaultRuntime:runc Swarm:{NodeID: NodeAddr: LocalNodeState:inactive ControlAvailable:false Error: RemoteManagers:<nil>} LiveRestoreEnabled:false Isolation: InitBinary:docker-init ContainerdCommit:{ID:4f03e100cb967922bec7459a78d16ccbac9bb81d.m Expected:4f03e100cb967922bec7459a78d16ccbac9bb81d.m} RuncCommit:{ID: Expected:} InitCommit:{ID:de40ad0 Expected:de40ad0} SecurityOptions:[name=seccomp,profile=builtin name=cgroupns] ProductLicense: Warnings:<nil> ServerErrors:[] ClientInfo:{Debug:false Plugins:[] Warnings:<nil>}}
I1129 07:24:37.974586   31296 docker.go:295] overlay module found
I1129 07:24:37.974604   31296 global.go:122] docker default: true priority: 9, state: {Installed:true Healthy:true Running:false NeedsImprovement:false Error:<nil> Reason: Fix: Doc: Version:}
I1129 07:24:37.994722   31296 global.go:122] none default: false priority: 4, state: {Installed:true Healthy:true Running:false NeedsImprovement:false Error:<nil> Reason: Fix: Doc: Version:}
I1129 07:24:37.994783   31296 global.go:122] podman default: true priority: 7, state: {Installed:false Healthy:false Running:false NeedsImprovement:false Error:exec: "podman": executable file not found in $PATH Reason: Fix:Install Podman Doc:https://minikube.sigs.k8s.io/docs/drivers/podman/ Version:}
I1129 07:24:37.994818   31296 driver.go:313] not recommending "ssh" due to default: false
I1129 07:24:37.994828   31296 driver.go:313] not recommending "none" due to default: false
I1129 07:24:37.994847   31296 driver.go:348] Picked: docker
I1129 07:24:37.994869   31296 driver.go:349] Alternatives: [ssh none]
I1129 07:24:37.994878   31296 driver.go:350] Rejects: [kvm2 qemu2 virtualbox vmware podman]
I1129 07:24:38.039528   31296 out.go:177] ✨  Automatically selected the docker driver. Other choices: ssh, none
I1129 07:24:38.062045   31296 start.go:298] selected driver: docker
I1129 07:24:38.062061   31296 start.go:902] validating driver "docker" against <nil>
I1129 07:24:38.062081   31296 start.go:913] status for docker: {Installed:true Healthy:true Running:false NeedsImprovement:false Error:<nil> Reason: Fix: Doc: Version:}
I1129 07:24:38.062205   31296 cli_runner.go:164] Run: docker system info --format "{{json .}}"
I1129 07:24:38.090074   31296 info.go:266] docker info: {ID:0380fbb9-23a0-4988-959d-aeff4f9ed66b Containers:0 ContainersRunning:0 ContainersPaused:0 ContainersStopped:0 Images:0 Driver:overlay2 DriverStatus:[[Backing Filesystem extfs] [Supports d_type true] [Using metacopy true] [Native Overlay Diff false] [userxattr false]] SystemStatus:<nil> Plugins:{Volume:[local] Network:[bridge host ipvlan macvlan null overlay] Authorization:<nil> Log:[awslogs fluentd gcplogs gelf journald json-file local logentries splunk syslog]} MemoryLimit:true SwapLimit:true KernelMemory:false KernelMemoryTCP:false CPUCfsPeriod:true CPUCfsQuota:true CPUShares:true CPUSet:true PidsLimit:true IPv4Forwarding:true BridgeNfIptables:true BridgeNfIP6Tables:true Debug:false NFd:23 OomKillDisable:false NGoroutines:37 SystemTime:2023-11-29 07:24:38.079470538 +0530 IST LoggingDriver:json-file CgroupDriver:systemd NEventsListener:0 KernelVersion:6.6.1-arch1-1 OperatingSystem:EndeavourOS OSType:linux Architecture:x86_64 IndexServerAddress:https://index.docker.io/v1/ RegistryConfig:{AllowNondistributableArtifactsCIDRs:[] AllowNondistributableArtifactsHostnames:[] InsecureRegistryCIDRs:[127.0.0.0/8] IndexConfigs:{DockerIo:{Name:docker.io Mirrors:[] Secure:true Official:true}} Mirrors:[]} NCPU:8 MemTotal:7212912640 GenericResources:<nil> DockerRootDir:/var/lib/docker HTTPProxy: HTTPSProxy: NoProxy: Name:chibacityblues Labels:[] ExperimentalBuild:false ServerVersion:24.0.7 ClusterStore: ClusterAdvertise: Runtimes:{Runc:{Path:runc}} DefaultRuntime:runc Swarm:{NodeID: NodeAddr: LocalNodeState:inactive ControlAvailable:false Error: RemoteManagers:<nil>} LiveRestoreEnabled:false Isolation: InitBinary:docker-init ContainerdCommit:{ID:4f03e100cb967922bec7459a78d16ccbac9bb81d.m Expected:4f03e100cb967922bec7459a78d16ccbac9bb81d.m} RuncCommit:{ID: Expected:} InitCommit:{ID:de40ad0 Expected:de40ad0} SecurityOptions:[name=seccomp,profile=builtin name=cgroupns] ProductLicense: Warnings:<nil> ServerErrors:[] ClientInfo:{Debug:false Plugins:[] Warnings:<nil>}}
I1129 07:24:38.090220   31296 start_flags.go:309] no existing cluster config was found, will generate one from the flags 
I1129 07:24:38.091083   31296 start_flags.go:394] Using suggested 2200MB memory alloc based on sys=6878MB, container=6878MB
I1129 07:24:38.091247   31296 start_flags.go:913] Wait components to verify : map[apiserver:true system_pods:true]
I1129 07:24:38.106862   31296 out.go:177] 📌  Using Docker driver with root privileges
I1129 07:24:38.130157   31296 cni.go:84] Creating CNI manager for ""
I1129 07:24:38.130194   31296 cni.go:158] "docker" driver + "docker" container runtime found on kubernetes v1.24+, recommending bridge
I1129 07:24:38.130217   31296 start_flags.go:318] Found "bridge CNI" CNI - setting NetworkPlugin=cni
I1129 07:24:38.130242   31296 start_flags.go:323] config:
{Name:minikube KeepContext:false EmbedCerts:false MinikubeISO: KicBaseImage:gcr.io/k8s-minikube/kicbase:v0.0.42@sha256:d35ac07dfda971cabee05e0deca8aeac772f885a5348e1a0c0b0a36db20fcfc0 Memory:2200 CPUs:2 DiskSize:20000 VMDriver: Driver:docker HyperkitVpnKitSock: HyperkitVSockPorts:[] DockerEnv:[] ContainerVolumeMounts:[] InsecureRegistry:[] RegistryMirror:[] HostOnlyCIDR:192.168.59.1/24 HypervVirtualSwitch: HypervUseExternalSwitch:false HypervExternalAdapter: KVMNetwork:default KVMQemuURI:qemu:///system KVMGPU:false KVMHidden:false KVMNUMACount:1 APIServerPort:0 DockerOpt:[] DisableDriverMounts:false NFSShare:[] NFSSharesRoot:/nfsshares UUID: NoVTXCheck:false DNSProxy:false HostDNSResolver:true HostOnlyNicType:virtio NatNicType:virtio SSHIPAddress: SSHUser:root SSHKey: SSHPort:22 KubernetesConfig:{KubernetesVersion:v1.28.3 ClusterName:minikube Namespace:default APIServerName:minikubeCA APIServerNames:[] APIServerIPs:[] DNSDomain:cluster.local ContainerRuntime:docker CRISocket: NetworkPlugin:cni FeatureGates: ServiceCIDR:10.96.0.0/12 ImageRepository: LoadBalancerStartIP: LoadBalancerEndIP: CustomIngressCert: RegistryAliases: ExtraOptions:[] ShouldLoadCachedImages:true EnableDefaultCNI:false CNI: NodeIP: NodePort:8443 NodeName:} Nodes:[] Addons:map[] CustomAddonImages:map[] CustomAddonRegistries:map[] VerifyComponents:map[apiserver:true system_pods:true] StartHostTimeout:6m0s ScheduledStop:<nil> ExposedPorts:[] ListenAddress: Network: Subnet: MultiNodeRequested:false ExtraDisks:0 CertExpiration:26280h0m0s Mount:false MountString:/home/flynn:/minikube-host Mount9PVersion:9p2000.L MountGID:docker MountIP: MountMSize:262144 MountOptions:[] MountPort:0 MountType:9p MountUID:docker BinaryMirror: DisableOptimizations:false DisableMetrics:false CustomQemuFirmwarePath: SocketVMnetClientPath: SocketVMnetPath: StaticIP: SSHAuthSock: SSHAgentPID:0 AutoPauseInterval:1m0s GPUs:}
I1129 07:24:38.152508   31296 out.go:177] 👍  Starting control plane node minikube in cluster minikube
I1129 07:24:38.174749   31296 cache.go:121] Beginning downloading kic base image for docker with docker
I1129 07:24:38.197527   31296 out.go:177] 🚜  Pulling base image ...
I1129 07:24:38.242427   31296 preload.go:132] Checking if preload exists for k8s version v1.28.3 and runtime docker
I1129 07:24:38.242711   31296 image.go:79] Checking for gcr.io/k8s-minikube/kicbase:v0.0.42@sha256:d35ac07dfda971cabee05e0deca8aeac772f885a5348e1a0c0b0a36db20fcfc0 in local docker daemon
I1129 07:24:38.267725   31296 cache.go:149] Downloading gcr.io/k8s-minikube/kicbase:v0.0.42@sha256:d35ac07dfda971cabee05e0deca8aeac772f885a5348e1a0c0b0a36db20fcfc0 to local cache
I1129 07:24:38.267943   31296 image.go:63] Checking for gcr.io/k8s-minikube/kicbase:v0.0.42@sha256:d35ac07dfda971cabee05e0deca8aeac772f885a5348e1a0c0b0a36db20fcfc0 in local cache directory
I1129 07:24:38.268208   31296 image.go:118] Writing gcr.io/k8s-minikube/kicbase:v0.0.42@sha256:d35ac07dfda971cabee05e0deca8aeac772f885a5348e1a0c0b0a36db20fcfc0 to local cache
I1129 07:24:38.747078   31296 preload.go:119] Found remote preload: https://storage.googleapis.com/minikube-preloaded-volume-tarballs/v18/v1.28.3/preloaded-images-k8s-v18-v1.28.3-docker-overlay2-amd64.tar.lz4
I1129 07:24:38.747110   31296 cache.go:56] Caching tarball of preloaded images
I1129 07:24:38.747341   31296 preload.go:132] Checking if preload exists for k8s version v1.28.3 and runtime docker
I1129 07:24:38.810596   31296 out.go:177] 💾  Downloading Kubernetes v1.28.3 preload ...
I1129 07:24:38.832556   31296 preload.go:238] getting checksum for preloaded-images-k8s-v18-v1.28.3-docker-overlay2-amd64.tar.lz4 ...
I1129 07:24:39.297775   31296 download.go:107] Downloading: https://storage.googleapis.com/minikube-preloaded-volume-tarballs/v18/v1.28.3/preloaded-images-k8s-v18-v1.28.3-docker-overlay2-amd64.tar.lz4?checksum=md5:82104bbf889ff8b69d5c141ce86c05ac -> /home/flynn/.minikube/cache/preloaded-tarball/preloaded-images-k8s-v18-v1.28.3-docker-overlay2-amd64.tar.lz4
I1129 07:25:54.309994   31296 preload.go:249] saving checksum for preloaded-images-k8s-v18-v1.28.3-docker-overlay2-amd64.tar.lz4 ...
I1129 07:25:54.310075   31296 preload.go:256] verifying checksum of /home/flynn/.minikube/cache/preloaded-tarball/preloaded-images-k8s-v18-v1.28.3-docker-overlay2-amd64.tar.lz4 ...
I1129 07:25:55.090499   31296 cache.go:59] Finished verifying existence of preloaded tar for  v1.28.3 on docker
I1129 07:25:55.090784   31296 profile.go:148] Saving config to /home/flynn/.minikube/profiles/minikube/config.json ...
I1129 07:25:55.090806   31296 lock.go:35] WriteFile acquiring /home/flynn/.minikube/profiles/minikube/config.json: {Name:mkf37c5b54b3c708a8be63c363fed388c5bd2857 Clock:{} Delay:500ms Timeout:1m0s Cancel:<nil>}
I1129 07:26:06.382510   31296 cache.go:152] successfully saved gcr.io/k8s-minikube/kicbase:v0.0.42@sha256:d35ac07dfda971cabee05e0deca8aeac772f885a5348e1a0c0b0a36db20fcfc0 as a tarball
I1129 07:26:06.382531   31296 cache.go:162] Loading gcr.io/k8s-minikube/kicbase:v0.0.42@sha256:d35ac07dfda971cabee05e0deca8aeac772f885a5348e1a0c0b0a36db20fcfc0 from local cache
I1129 07:26:41.998556   31296 cache.go:164] successfully loaded and using gcr.io/k8s-minikube/kicbase:v0.0.42@sha256:d35ac07dfda971cabee05e0deca8aeac772f885a5348e1a0c0b0a36db20fcfc0 from cached tarball
I1129 07:26:41.998603   31296 cache.go:194] Successfully downloaded all kic artifacts
I1129 07:26:41.998654   31296 start.go:365] acquiring machines lock for minikube: {Name:mk35b556f0ef524cba22d978f0fb9f8556a986ef Clock:{} Delay:500ms Timeout:10m0s Cancel:<nil>}
I1129 07:26:41.998808   31296 start.go:369] acquired machines lock for "minikube" in 117.736µs
I1129 07:26:42.063571   31296 start.go:93] Provisioning new machine with config: &{Name:minikube KeepContext:false EmbedCerts:false MinikubeISO: KicBaseImage:gcr.io/k8s-minikube/kicbase:v0.0.42@sha256:d35ac07dfda971cabee05e0deca8aeac772f885a5348e1a0c0b0a36db20fcfc0 Memory:2200 CPUs:2 DiskSize:20000 VMDriver: Driver:docker HyperkitVpnKitSock: HyperkitVSockPorts:[] DockerEnv:[] ContainerVolumeMounts:[] InsecureRegistry:[] RegistryMirror:[] HostOnlyCIDR:192.168.59.1/24 HypervVirtualSwitch: HypervUseExternalSwitch:false HypervExternalAdapter: KVMNetwork:default KVMQemuURI:qemu:///system KVMGPU:false KVMHidden:false KVMNUMACount:1 APIServerPort:0 DockerOpt:[] DisableDriverMounts:false NFSShare:[] NFSSharesRoot:/nfsshares UUID: NoVTXCheck:false DNSProxy:false HostDNSResolver:true HostOnlyNicType:virtio NatNicType:virtio SSHIPAddress: SSHUser:root SSHKey: SSHPort:22 KubernetesConfig:{KubernetesVersion:v1.28.3 ClusterName:minikube Namespace:default APIServerName:minikubeCA APIServerNames:[] APIServerIPs:[] DNSDomain:cluster.local ContainerRuntime:docker CRISocket: NetworkPlugin:cni FeatureGates: ServiceCIDR:10.96.0.0/12 ImageRepository: LoadBalancerStartIP: LoadBalancerEndIP: CustomIngressCert: RegistryAliases: ExtraOptions:[] ShouldLoadCachedImages:true EnableDefaultCNI:false CNI: NodeIP: NodePort:8443 NodeName:} Nodes:[{Name: IP: Port:8443 KubernetesVersion:v1.28.3 ContainerRuntime:docker ControlPlane:true Worker:true}] Addons:map[] CustomAddonImages:map[] CustomAddonRegistries:map[] VerifyComponents:map[apiserver:true system_pods:true] StartHostTimeout:6m0s ScheduledStop:<nil> ExposedPorts:[] ListenAddress: Network: Subnet: MultiNodeRequested:false ExtraDisks:0 CertExpiration:26280h0m0s Mount:false MountString:/home/flynn:/minikube-host Mount9PVersion:9p2000.L MountGID:docker MountIP: MountMSize:262144 MountOptions:[] MountPort:0 MountType:9p MountUID:docker BinaryMirror: DisableOptimizations:false DisableMetrics:false CustomQemuFirmwarePath: SocketVMnetClientPath: SocketVMnetPath: StaticIP: SSHAuthSock: SSHAgentPID:0 AutoPauseInterval:1m0s GPUs:} &{Name: IP: Port:8443 KubernetesVersion:v1.28.3 ContainerRuntime:docker ControlPlane:true Worker:true}
I1129 07:26:42.063744   31296 start.go:125] createHost starting for "" (driver="docker")
I1129 07:26:42.318781   31296 out.go:204] 🔥  Creating docker container (CPUs=2, Memory=2200MB) ...
I1129 07:26:42.357000   31296 start.go:159] libmachine.API.Create for "minikube" (driver="docker")
I1129 07:26:42.357033   31296 client.go:168] LocalClient.Create starting
I1129 07:26:42.386169   31296 main.go:141] libmachine: Creating CA: /home/flynn/.minikube/certs/ca.pem
I1129 07:26:42.533786   31296 main.go:141] libmachine: Creating client certificate: /home/flynn/.minikube/certs/cert.pem
I1129 07:26:42.776892   31296 cli_runner.go:164] Run: docker network inspect minikube --format "{"Name": "{{.Name}}","Driver": "{{.Driver}}","Subnet": "{{range .IPAM.Config}}{{.Subnet}}{{end}}","Gateway": "{{range .IPAM.Config}}{{.Gateway}}{{end}}","MTU": {{if (index .Options "com.docker.network.driver.mtu")}}{{(index .Options "com.docker.network.driver.mtu")}}{{else}}0{{end}}, "ContainerIPs": [{{range $k,$v := .Containers }}"{{$v.IPv4Address}}",{{end}}]}"
W1129 07:26:42.850251   31296 cli_runner.go:211] docker network inspect minikube --format "{"Name": "{{.Name}}","Driver": "{{.Driver}}","Subnet": "{{range .IPAM.Config}}{{.Subnet}}{{end}}","Gateway": "{{range .IPAM.Config}}{{.Gateway}}{{end}}","MTU": {{if (index .Options "com.docker.network.driver.mtu")}}{{(index .Options "com.docker.network.driver.mtu")}}{{else}}0{{end}}, "ContainerIPs": [{{range $k,$v := .Containers }}"{{$v.IPv4Address}}",{{end}}]}" returned with exit code 1
I1129 07:26:42.947805   31296 network_create.go:281] running [docker network inspect minikube] to gather additional debugging logs...
I1129 07:26:42.947873   31296 cli_runner.go:164] Run: docker network inspect minikube
W1129 07:26:42.969358   31296 cli_runner.go:211] docker network inspect minikube returned with exit code 1
I1129 07:26:42.969382   31296 network_create.go:284] error running [docker network inspect minikube]: docker network inspect minikube: exit status 1
stdout:
[]

stderr:
Error response from daemon: network minikube not found
I1129 07:26:42.969400   31296 network_create.go:286] output of [docker network inspect minikube]: -- stdout --
[]

-- /stdout --
** stderr ** 
Error response from daemon: network minikube not found

** /stderr **
I1129 07:26:42.969527   31296 cli_runner.go:164] Run: docker network inspect bridge --format "{"Name": "{{.Name}}","Driver": "{{.Driver}}","Subnet": "{{range .IPAM.Config}}{{.Subnet}}{{end}}","Gateway": "{{range .IPAM.Config}}{{.Gateway}}{{end}}","MTU": {{if (index .Options "com.docker.network.driver.mtu")}}{{(index .Options "com.docker.network.driver.mtu")}}{{else}}0{{end}}, "ContainerIPs": [{{range $k,$v := .Containers }}"{{$v.IPv4Address}}",{{end}}]}"
I1129 07:26:42.994223   31296 network.go:209] using free private subnet 192.168.49.0/24: &{IP:192.168.49.0 Netmask:255.255.255.0 Prefix:24 CIDR:192.168.49.0/24 Gateway:192.168.49.1 ClientMin:192.168.49.2 ClientMax:192.168.49.254 Broadcast:192.168.49.255 IsPrivate:true Interface:{IfaceName: IfaceIPv4: IfaceMTU:0 IfaceMAC:} reservation:0xc002a4b5e0}
I1129 07:26:42.994261   31296 network_create.go:124] attempt to create docker network minikube 192.168.49.0/24 with gateway 192.168.49.1 and MTU of 1500 ...
I1129 07:26:42.994335   31296 cli_runner.go:164] Run: docker network create --driver=bridge --subnet=192.168.49.0/24 --gateway=192.168.49.1 -o --ip-masq -o --icc -o com.docker.network.driver.mtu=1500 --label=created_by.minikube.sigs.k8s.io=true --label=name.minikube.sigs.k8s.io=minikube minikube
I1129 07:26:44.345307   31296 cli_runner.go:217] Completed: docker network create --driver=bridge --subnet=192.168.49.0/24 --gateway=192.168.49.1 -o --ip-masq -o --icc -o com.docker.network.driver.mtu=1500 --label=created_by.minikube.sigs.k8s.io=true --label=name.minikube.sigs.k8s.io=minikube minikube: (1.350933384s)
I1129 07:26:44.345341   31296 network_create.go:108] docker network minikube 192.168.49.0/24 created
I1129 07:26:44.345360   31296 kic.go:121] calculated static IP "192.168.49.2" for the "minikube" container
I1129 07:26:44.345437   31296 cli_runner.go:164] Run: docker ps -a --format {{.Names}}
I1129 07:26:44.410541   31296 cli_runner.go:164] Run: docker volume create minikube --label name.minikube.sigs.k8s.io=minikube --label created_by.minikube.sigs.k8s.io=true
I1129 07:26:44.560727   31296 oci.go:103] Successfully created a docker volume minikube
I1129 07:26:44.560829   31296 cli_runner.go:164] Run: docker run --rm --name minikube-preload-sidecar --label created_by.minikube.sigs.k8s.io=true --label name.minikube.sigs.k8s.io=minikube --entrypoint /usr/bin/test -v minikube:/var gcr.io/k8s-minikube/kicbase:v0.0.42@sha256:d35ac07dfda971cabee05e0deca8aeac772f885a5348e1a0c0b0a36db20fcfc0 -d /var/lib
I1129 07:26:53.495744   31296 cli_runner.go:217] Completed: docker run --rm --name minikube-preload-sidecar --label created_by.minikube.sigs.k8s.io=true --label name.minikube.sigs.k8s.io=minikube --entrypoint /usr/bin/test -v minikube:/var gcr.io/k8s-minikube/kicbase:v0.0.42@sha256:d35ac07dfda971cabee05e0deca8aeac772f885a5348e1a0c0b0a36db20fcfc0 -d /var/lib: (8.934859489s)
I1129 07:26:53.495773   31296 oci.go:107] Successfully prepared a docker volume minikube
I1129 07:26:53.495807   31296 preload.go:132] Checking if preload exists for k8s version v1.28.3 and runtime docker
I1129 07:26:53.495844   31296 kic.go:194] Starting extracting preloaded images to volume ...
I1129 07:26:53.495946   31296 cli_runner.go:164] Run: docker run --rm --entrypoint /usr/bin/tar -v /home/flynn/.minikube/cache/preloaded-tarball/preloaded-images-k8s-v18-v1.28.3-docker-overlay2-amd64.tar.lz4:/preloaded.tar:ro -v minikube:/extractDir gcr.io/k8s-minikube/kicbase:v0.0.42@sha256:d35ac07dfda971cabee05e0deca8aeac772f885a5348e1a0c0b0a36db20fcfc0 -I lz4 -xf /preloaded.tar -C /extractDir
I1129 07:27:12.837739   31296 cli_runner.go:217] Completed: docker run --rm --entrypoint /usr/bin/tar -v /home/flynn/.minikube/cache/preloaded-tarball/preloaded-images-k8s-v18-v1.28.3-docker-overlay2-amd64.tar.lz4:/preloaded.tar:ro -v minikube:/extractDir gcr.io/k8s-minikube/kicbase:v0.0.42@sha256:d35ac07dfda971cabee05e0deca8aeac772f885a5348e1a0c0b0a36db20fcfc0 -I lz4 -xf /preloaded.tar -C /extractDir: (19.341739809s)
I1129 07:27:12.878011   31296 kic.go:203] duration metric: took 19.382156 seconds to extract preloaded images to volume
W1129 07:27:12.878249   31296 cgroups_linux.go:77] Your kernel does not support swap limit capabilities or the cgroup is not mounted.
W1129 07:27:12.878307   31296 oci.go:243] Your kernel does not support CPU cfs period/quota or the cgroup is not mounted.
I1129 07:27:12.878377   31296 cli_runner.go:164] Run: docker info --format "'{{json .SecurityOptions}}'"
I1129 07:27:13.024362   31296 cli_runner.go:164] Run: docker run -d -t --privileged --security-opt seccomp=unconfined --tmpfs /tmp --tmpfs /run -v /lib/modules:/lib/modules:ro --hostname minikube --name minikube --label created_by.minikube.sigs.k8s.io=true --label name.minikube.sigs.k8s.io=minikube --label role.minikube.sigs.k8s.io= --label mode.minikube.sigs.k8s.io=minikube --network minikube --ip 192.168.49.2 --volume minikube:/var --security-opt apparmor=unconfined --memory=2200mb -e container=docker --expose 8443 --publish=127.0.0.1::8443 --publish=127.0.0.1::22 --publish=127.0.0.1::2376 --publish=127.0.0.1::5000 --publish=127.0.0.1::32443 gcr.io/k8s-minikube/kicbase:v0.0.42@sha256:d35ac07dfda971cabee05e0deca8aeac772f885a5348e1a0c0b0a36db20fcfc0
I1129 07:27:14.822015   31296 cli_runner.go:217] Completed: docker run -d -t --privileged --security-opt seccomp=unconfined --tmpfs /tmp --tmpfs /run -v /lib/modules:/lib/modules:ro --hostname minikube --name minikube --label created_by.minikube.sigs.k8s.io=true --label name.minikube.sigs.k8s.io=minikube --label role.minikube.sigs.k8s.io= --label mode.minikube.sigs.k8s.io=minikube --network minikube --ip 192.168.49.2 --volume minikube:/var --security-opt apparmor=unconfined --memory=2200mb -e container=docker --expose 8443 --publish=127.0.0.1::8443 --publish=127.0.0.1::22 --publish=127.0.0.1::2376 --publish=127.0.0.1::5000 --publish=127.0.0.1::32443 gcr.io/k8s-minikube/kicbase:v0.0.42@sha256:d35ac07dfda971cabee05e0deca8aeac772f885a5348e1a0c0b0a36db20fcfc0: (1.797557663s)
I1129 07:27:14.822139   31296 cli_runner.go:164] Run: docker container inspect minikube --format={{.State.Running}}
I1129 07:27:14.848223   31296 cli_runner.go:164] Run: docker container inspect minikube --format={{.State.Status}}
I1129 07:27:14.870805   31296 cli_runner.go:164] Run: docker exec minikube stat /var/lib/dpkg/alternatives/iptables
I1129 07:27:14.968046   31296 oci.go:144] the created container "minikube" has a running status.
I1129 07:27:14.968070   31296 kic.go:225] Creating ssh key for kic: /home/flynn/.minikube/machines/minikube/id_rsa...
I1129 07:27:15.135992   31296 kic_runner.go:191] docker (temp): /home/flynn/.minikube/machines/minikube/id_rsa.pub --> /home/docker/.ssh/authorized_keys (381 bytes)
I1129 07:27:15.240769   31296 cli_runner.go:164] Run: docker container inspect minikube --format={{.State.Status}}
I1129 07:27:15.280064   31296 kic_runner.go:93] Run: chown docker:docker /home/docker/.ssh/authorized_keys
I1129 07:27:15.280079   31296 kic_runner.go:114] Args: [docker exec --privileged minikube chown docker:docker /home/docker/.ssh/authorized_keys]
I1129 07:27:15.338266   31296 cli_runner.go:164] Run: docker container inspect minikube --format={{.State.Status}}
I1129 07:27:15.365328   31296 machine.go:88] provisioning docker machine ...
I1129 07:27:15.365373   31296 ubuntu.go:169] provisioning hostname "minikube"
I1129 07:27:15.365456   31296 cli_runner.go:164] Run: docker container inspect -f "'{{(index (index .NetworkSettings.Ports "22/tcp") 0).HostPort}}'" minikube
I1129 07:27:15.414869   31296 main.go:141] libmachine: Using SSH client type: native
I1129 07:27:15.415406   31296 main.go:141] libmachine: &{{{<nil> 0 [] [] []} docker [0x808a40] 0x80b720 <nil>  [] 0s} 127.0.0.1 32772 <nil> <nil>}
I1129 07:27:15.415427   31296 main.go:141] libmachine: About to run SSH command:
sudo hostname minikube && echo "minikube" | sudo tee /etc/hostname
I1129 07:27:15.416161   31296 main.go:141] libmachine: Error dialing TCP: ssh: handshake failed: read tcp 127.0.0.1:58826->127.0.0.1:32772: read: connection reset by peer
I1129 07:27:18.988806   31296 main.go:141] libmachine: SSH cmd err, output: <nil>: minikube

I1129 07:27:18.988885   31296 cli_runner.go:164] Run: docker container inspect -f "'{{(index (index .NetworkSettings.Ports "22/tcp") 0).HostPort}}'" minikube
I1129 07:27:19.011733   31296 main.go:141] libmachine: Using SSH client type: native
I1129 07:27:19.012232   31296 main.go:141] libmachine: &{{{<nil> 0 [] [] []} docker [0x808a40] 0x80b720 <nil>  [] 0s} 127.0.0.1 32772 <nil> <nil>}
I1129 07:27:19.012267   31296 main.go:141] libmachine: About to run SSH command:

		if ! grep -xq '.*\sminikube' /etc/hosts; then
			if grep -xq '127.0.1.1\s.*' /etc/hosts; then
				sudo sed -i 's/^127.0.1.1\s.*/127.0.1.1 minikube/g' /etc/hosts;
			else 
				echo '127.0.1.1 minikube' | sudo tee -a /etc/hosts; 
			fi
		fi
I1129 07:27:19.195725   31296 main.go:141] libmachine: SSH cmd err, output: <nil>: 
I1129 07:27:19.195757   31296 ubuntu.go:175] set auth options {CertDir:/home/flynn/.minikube CaCertPath:/home/flynn/.minikube/certs/ca.pem CaPrivateKeyPath:/home/flynn/.minikube/certs/ca-key.pem CaCertRemotePath:/etc/docker/ca.pem ServerCertPath:/home/flynn/.minikube/machines/server.pem ServerKeyPath:/home/flynn/.minikube/machines/server-key.pem ClientKeyPath:/home/flynn/.minikube/certs/key.pem ServerCertRemotePath:/etc/docker/server.pem ServerKeyRemotePath:/etc/docker/server-key.pem ClientCertPath:/home/flynn/.minikube/certs/cert.pem ServerCertSANs:[] StorePath:/home/flynn/.minikube}
I1129 07:27:19.195798   31296 ubuntu.go:177] setting up certificates
I1129 07:27:19.195839   31296 provision.go:83] configureAuth start
I1129 07:27:19.195952   31296 cli_runner.go:164] Run: docker container inspect -f "{{range .NetworkSettings.Networks}}{{.IPAddress}},{{.GlobalIPv6Address}}{{end}}" minikube
I1129 07:27:19.217338   31296 provision.go:138] copyHostCerts
I1129 07:27:19.217446   31296 exec_runner.go:151] cp: /home/flynn/.minikube/certs/key.pem --> /home/flynn/.minikube/key.pem (1679 bytes)
I1129 07:27:19.217647   31296 exec_runner.go:151] cp: /home/flynn/.minikube/certs/ca.pem --> /home/flynn/.minikube/ca.pem (1074 bytes)
I1129 07:27:19.217793   31296 exec_runner.go:151] cp: /home/flynn/.minikube/certs/cert.pem --> /home/flynn/.minikube/cert.pem (1119 bytes)
I1129 07:27:19.217909   31296 provision.go:112] generating server cert: /home/flynn/.minikube/machines/server.pem ca-key=/home/flynn/.minikube/certs/ca.pem private-key=/home/flynn/.minikube/certs/ca-key.pem org=flynn.minikube san=[192.168.49.2 127.0.0.1 localhost 127.0.0.1 minikube minikube]
I1129 07:27:19.364623   31296 provision.go:172] copyRemoteCerts
I1129 07:27:19.364685   31296 ssh_runner.go:195] Run: sudo mkdir -p /etc/docker /etc/docker /etc/docker
I1129 07:27:19.364762   31296 cli_runner.go:164] Run: docker container inspect -f "'{{(index (index .NetworkSettings.Ports "22/tcp") 0).HostPort}}'" minikube
I1129 07:27:19.394344   31296 sshutil.go:53] new ssh client: &{IP:127.0.0.1 Port:32772 SSHKeyPath:/home/flynn/.minikube/machines/minikube/id_rsa Username:docker}
I1129 07:27:19.511463   31296 ssh_runner.go:362] scp /home/flynn/.minikube/certs/ca.pem --> /etc/docker/ca.pem (1074 bytes)
I1129 07:27:19.650504   31296 ssh_runner.go:362] scp /home/flynn/.minikube/machines/server.pem --> /etc/docker/server.pem (1196 bytes)
I1129 07:27:19.692680   31296 ssh_runner.go:362] scp /home/flynn/.minikube/machines/server-key.pem --> /etc/docker/server-key.pem (1679 bytes)
I1129 07:27:19.735974   31296 provision.go:86] duration metric: configureAuth took 540.095676ms
I1129 07:27:19.736008   31296 ubuntu.go:193] setting minikube options for container-runtime
I1129 07:27:19.736268   31296 config.go:182] Loaded profile config "minikube": Driver=docker, ContainerRuntime=docker, KubernetesVersion=v1.28.3
I1129 07:27:19.736350   31296 cli_runner.go:164] Run: docker container inspect -f "'{{(index (index .NetworkSettings.Ports "22/tcp") 0).HostPort}}'" minikube
I1129 07:27:19.757779   31296 main.go:141] libmachine: Using SSH client type: native
I1129 07:27:19.758235   31296 main.go:141] libmachine: &{{{<nil> 0 [] [] []} docker [0x808a40] 0x80b720 <nil>  [] 0s} 127.0.0.1 32772 <nil> <nil>}
I1129 07:27:19.758249   31296 main.go:141] libmachine: About to run SSH command:
df --output=fstype / | tail -n 1
I1129 07:27:19.923846   31296 main.go:141] libmachine: SSH cmd err, output: <nil>: overlay

I1129 07:27:19.923872   31296 ubuntu.go:71] root file system type: overlay
I1129 07:27:19.924025   31296 provision.go:309] Updating docker unit: /lib/systemd/system/docker.service ...
I1129 07:27:19.924109   31296 cli_runner.go:164] Run: docker container inspect -f "'{{(index (index .NetworkSettings.Ports "22/tcp") 0).HostPort}}'" minikube
I1129 07:27:19.953278   31296 main.go:141] libmachine: Using SSH client type: native
I1129 07:27:19.953933   31296 main.go:141] libmachine: &{{{<nil> 0 [] [] []} docker [0x808a40] 0x80b720 <nil>  [] 0s} 127.0.0.1 32772 <nil> <nil>}
I1129 07:27:19.954077   31296 main.go:141] libmachine: About to run SSH command:
sudo mkdir -p /lib/systemd/system && printf %!s(MISSING) "[Unit]
Description=Docker Application Container Engine
Documentation=https://docs.docker.com
BindsTo=containerd.service
After=network-online.target firewalld.service containerd.service
Wants=network-online.target
Requires=docker.socket
StartLimitBurst=3
StartLimitIntervalSec=60

[Service]
Type=notify
Restart=on-failure



# This file is a systemd drop-in unit that inherits from the base dockerd configuration.
# The base configuration already specifies an 'ExecStart=...' command. The first directive
# here is to clear out that command inherited from the base configuration. Without this,
# the command from the base configuration and the command specified here are treated as
# a sequence of commands, which is not the desired behavior, nor is it valid -- systemd
# will catch this invalid input and refuse to start the service with an error like:
#  Service has more than one ExecStart= setting, which is only allowed for Type=oneshot services.

# NOTE: default-ulimit=nofile is set to an arbitrary number for consistency with other
# container runtimes. If left unlimited, it may result in OOM issues with MySQL.
ExecStart=
ExecStart=/usr/bin/dockerd -H tcp://0.0.0.0:2376 -H unix:///var/run/docker.sock --default-ulimit=nofile=1048576:1048576 --tlsverify --tlscacert /etc/docker/ca.pem --tlscert /etc/docker/server.pem --tlskey /etc/docker/server-key.pem --label provider=docker --insecure-registry 10.96.0.0/12 
ExecReload=/bin/kill -s HUP \$MAINPID

# Having non-zero Limit*s causes performance problems due to accounting overhead
# in the kernel. We recommend using cgroups to do container-local accounting.
LimitNOFILE=infinity
LimitNPROC=infinity
LimitCORE=infinity

# Uncomment TasksMax if your systemd version supports it.
# Only systemd 226 and above support this version.
TasksMax=infinity
TimeoutStartSec=0

# set delegate yes so that systemd does not reset the cgroups of docker containers
Delegate=yes

# kill only the docker process, not all processes in the cgroup
KillMode=process

[Install]
WantedBy=multi-user.target
" | sudo tee /lib/systemd/system/docker.service.new
I1129 07:27:20.165466   31296 main.go:141] libmachine: SSH cmd err, output: <nil>: [Unit]
Description=Docker Application Container Engine
Documentation=https://docs.docker.com
BindsTo=containerd.service
After=network-online.target firewalld.service containerd.service
Wants=network-online.target
Requires=docker.socket
StartLimitBurst=3
StartLimitIntervalSec=60

[Service]
Type=notify
Restart=on-failure



# This file is a systemd drop-in unit that inherits from the base dockerd configuration.
# The base configuration already specifies an 'ExecStart=...' command. The first directive
# here is to clear out that command inherited from the base configuration. Without this,
# the command from the base configuration and the command specified here are treated as
# a sequence of commands, which is not the desired behavior, nor is it valid -- systemd
# will catch this invalid input and refuse to start the service with an error like:
#  Service has more than one ExecStart= setting, which is only allowed for Type=oneshot services.

# NOTE: default-ulimit=nofile is set to an arbitrary number for consistency with other
# container runtimes. If left unlimited, it may result in OOM issues with MySQL.
ExecStart=
ExecStart=/usr/bin/dockerd -H tcp://0.0.0.0:2376 -H unix:///var/run/docker.sock --default-ulimit=nofile=1048576:1048576 --tlsverify --tlscacert /etc/docker/ca.pem --tlscert /etc/docker/server.pem --tlskey /etc/docker/server-key.pem --label provider=docker --insecure-registry 10.96.0.0/12 
ExecReload=/bin/kill -s HUP $MAINPID

# Having non-zero Limit*s causes performance problems due to accounting overhead
# in the kernel. We recommend using cgroups to do container-local accounting.
LimitNOFILE=infinity
LimitNPROC=infinity
LimitCORE=infinity

# Uncomment TasksMax if your systemd version supports it.
# Only systemd 226 and above support this version.
TasksMax=infinity
TimeoutStartSec=0

# set delegate yes so that systemd does not reset the cgroups of docker containers
Delegate=yes

# kill only the docker process, not all processes in the cgroup
KillMode=process

[Install]
WantedBy=multi-user.target

I1129 07:27:20.165598   31296 cli_runner.go:164] Run: docker container inspect -f "'{{(index (index .NetworkSettings.Ports "22/tcp") 0).HostPort}}'" minikube
I1129 07:27:20.193055   31296 main.go:141] libmachine: Using SSH client type: native
I1129 07:27:20.193723   31296 main.go:141] libmachine: &{{{<nil> 0 [] [] []} docker [0x808a40] 0x80b720 <nil>  [] 0s} 127.0.0.1 32772 <nil> <nil>}
I1129 07:27:20.193758   31296 main.go:141] libmachine: About to run SSH command:
sudo diff -u /lib/systemd/system/docker.service /lib/systemd/system/docker.service.new || { sudo mv /lib/systemd/system/docker.service.new /lib/systemd/system/docker.service; sudo systemctl -f daemon-reload && sudo systemctl -f enable docker && sudo systemctl -f restart docker; }
I1129 07:27:22.961761   31296 main.go:141] libmachine: SSH cmd err, output: <nil>: --- /lib/systemd/system/docker.service	2023-10-26 09:06:22.000000000 +0000
+++ /lib/systemd/system/docker.service.new	2023-11-29 01:57:20.156742536 +0000
@@ -1,30 +1,32 @@
 [Unit]
 Description=Docker Application Container Engine
 Documentation=https://docs.docker.com
-After=network-online.target docker.socket firewalld.service containerd.service time-set.target
-Wants=network-online.target containerd.service
+BindsTo=containerd.service
+After=network-online.target firewalld.service containerd.service
+Wants=network-online.target
 Requires=docker.socket
+StartLimitBurst=3
+StartLimitIntervalSec=60
 
 [Service]
 Type=notify
-# the default is not to use systemd for cgroups because the delegate issues still
-# exists and systemd currently does not support the cgroup feature set required
-# for containers run by docker
-ExecStart=/usr/bin/dockerd -H fd:// --containerd=/run/containerd/containerd.sock
-ExecReload=/bin/kill -s HUP $MAINPID
-TimeoutStartSec=0
-RestartSec=2
-Restart=always
+Restart=on-failure
 
-# Note that StartLimit* options were moved from "Service" to "Unit" in systemd 229.
-# Both the old, and new location are accepted by systemd 229 and up, so using the old location
-# to make them work for either version of systemd.
-StartLimitBurst=3
 
-# Note that StartLimitInterval was renamed to StartLimitIntervalSec in systemd 230.
-# Both the old, and new name are accepted by systemd 230 and up, so using the old name to make
-# this option work for either version of systemd.
-StartLimitInterval=60s
+
+# This file is a systemd drop-in unit that inherits from the base dockerd configuration.
+# The base configuration already specifies an 'ExecStart=...' command. The first directive
+# here is to clear out that command inherited from the base configuration. Without this,
+# the command from the base configuration and the command specified here are treated as
+# a sequence of commands, which is not the desired behavior, nor is it valid -- systemd
+# will catch this invalid input and refuse to start the service with an error like:
+#  Service has more than one ExecStart= setting, which is only allowed for Type=oneshot services.
+
+# NOTE: default-ulimit=nofile is set to an arbitrary number for consistency with other
+# container runtimes. If left unlimited, it may result in OOM issues with MySQL.
+ExecStart=
+ExecStart=/usr/bin/dockerd -H tcp://0.0.0.0:2376 -H unix:///var/run/docker.sock --default-ulimit=nofile=1048576:1048576 --tlsverify --tlscacert /etc/docker/ca.pem --tlscert /etc/docker/server.pem --tlskey /etc/docker/server-key.pem --label provider=docker --insecure-registry 10.96.0.0/12 
+ExecReload=/bin/kill -s HUP $MAINPID
 
 # Having non-zero Limit*s causes performance problems due to accounting overhead
 # in the kernel. We recommend using cgroups to do container-local accounting.
@@ -32,16 +34,16 @@
 LimitNPROC=infinity
 LimitCORE=infinity
 
-# Comment TasksMax if your systemd version does not support it.
-# Only systemd 226 and above support this option.
+# Uncomment TasksMax if your systemd version supports it.
+# Only systemd 226 and above support this version.
 TasksMax=infinity
+TimeoutStartSec=0
 
 # set delegate yes so that systemd does not reset the cgroups of docker containers
 Delegate=yes
 
 # kill only the docker process, not all processes in the cgroup
 KillMode=process
-OOMScoreAdjust=-500
 
 [Install]
 WantedBy=multi-user.target
Synchronizing state of docker.service with SysV service script with /lib/systemd/systemd-sysv-install.
Executing: /lib/systemd/systemd-sysv-install enable docker

I1129 07:27:22.961795   31296 machine.go:91] provisioned docker machine in 7.596439425s
I1129 07:27:22.961812   31296 client.go:171] LocalClient.Create took 40.604761769s
I1129 07:27:22.961838   31296 start.go:167] duration metric: libmachine.API.Create for "minikube" took 40.604843159s
I1129 07:27:22.961853   31296 start.go:300] post-start starting for "minikube" (driver="docker")
I1129 07:27:22.961877   31296 start.go:329] creating required directories: [/etc/kubernetes/addons /etc/kubernetes/manifests /var/tmp/minikube /var/lib/minikube /var/lib/minikube/certs /var/lib/minikube/images /var/lib/minikube/binaries /tmp/gvisor /usr/share/ca-certificates /etc/ssl/certs]
I1129 07:27:22.961980   31296 ssh_runner.go:195] Run: sudo mkdir -p /etc/kubernetes/addons /etc/kubernetes/manifests /var/tmp/minikube /var/lib/minikube /var/lib/minikube/certs /var/lib/minikube/images /var/lib/minikube/binaries /tmp/gvisor /usr/share/ca-certificates /etc/ssl/certs
I1129 07:27:22.962067   31296 cli_runner.go:164] Run: docker container inspect -f "'{{(index (index .NetworkSettings.Ports "22/tcp") 0).HostPort}}'" minikube
I1129 07:27:22.989203   31296 sshutil.go:53] new ssh client: &{IP:127.0.0.1 Port:32772 SSHKeyPath:/home/flynn/.minikube/machines/minikube/id_rsa Username:docker}
I1129 07:27:23.097440   31296 ssh_runner.go:195] Run: cat /etc/os-release
I1129 07:27:23.104837   31296 main.go:141] libmachine: Couldn't set key VERSION_CODENAME, no corresponding struct field found
I1129 07:27:23.104888   31296 main.go:141] libmachine: Couldn't set key PRIVACY_POLICY_URL, no corresponding struct field found
I1129 07:27:23.104911   31296 main.go:141] libmachine: Couldn't set key UBUNTU_CODENAME, no corresponding struct field found
I1129 07:27:23.104930   31296 info.go:137] Remote host: Ubuntu 22.04.3 LTS
I1129 07:27:23.104948   31296 filesync.go:126] Scanning /home/flynn/.minikube/addons for local assets ...
I1129 07:27:23.230100   31296 filesync.go:126] Scanning /home/flynn/.minikube/files for local assets ...
I1129 07:27:23.230387   31296 start.go:303] post-start completed in 268.512416ms
I1129 07:27:23.230740   31296 cli_runner.go:164] Run: docker container inspect -f "{{range .NetworkSettings.Networks}}{{.IPAddress}},{{.GlobalIPv6Address}}{{end}}" minikube
I1129 07:27:23.258647   31296 profile.go:148] Saving config to /home/flynn/.minikube/profiles/minikube/config.json ...
I1129 07:27:23.274949   31296 ssh_runner.go:195] Run: sh -c "df -h /var | awk 'NR==2{print $5}'"
I1129 07:27:23.275019   31296 cli_runner.go:164] Run: docker container inspect -f "'{{(index (index .NetworkSettings.Ports "22/tcp") 0).HostPort}}'" minikube
I1129 07:27:23.296743   31296 sshutil.go:53] new ssh client: &{IP:127.0.0.1 Port:32772 SSHKeyPath:/home/flynn/.minikube/machines/minikube/id_rsa Username:docker}
I1129 07:27:23.528999   31296 ssh_runner.go:195] Run: sh -c "df -BG /var | awk 'NR==2{print $4}'"
I1129 07:27:23.537875   31296 start.go:128] duration metric: createHost completed in 41.474095126s
I1129 07:27:23.537905   31296 start.go:83] releasing machines lock for "minikube", held for 41.539071079s
I1129 07:27:23.538005   31296 cli_runner.go:164] Run: docker container inspect -f "{{range .NetworkSettings.Networks}}{{.IPAddress}},{{.GlobalIPv6Address}}{{end}}" minikube
I1129 07:27:23.564693   31296 ssh_runner.go:195] Run: cat /version.json
I1129 07:27:23.564764   31296 ssh_runner.go:195] Run: curl -sS -m 2 https://registry.k8s.io/
I1129 07:27:23.564767   31296 cli_runner.go:164] Run: docker container inspect -f "'{{(index (index .NetworkSettings.Ports "22/tcp") 0).HostPort}}'" minikube
I1129 07:27:23.564849   31296 cli_runner.go:164] Run: docker container inspect -f "'{{(index (index .NetworkSettings.Ports "22/tcp") 0).HostPort}}'" minikube
I1129 07:27:23.588232   31296 sshutil.go:53] new ssh client: &{IP:127.0.0.1 Port:32772 SSHKeyPath:/home/flynn/.minikube/machines/minikube/id_rsa Username:docker}
I1129 07:27:23.589447   31296 sshutil.go:53] new ssh client: &{IP:127.0.0.1 Port:32772 SSHKeyPath:/home/flynn/.minikube/machines/minikube/id_rsa Username:docker}
I1129 07:27:23.681048   31296 ssh_runner.go:195] Run: systemctl --version
I1129 07:27:24.198715   31296 ssh_runner.go:195] Run: sh -c "stat /etc/cni/net.d/*loopback.conf*"
I1129 07:27:24.214500   31296 ssh_runner.go:195] Run: sudo find /etc/cni/net.d -maxdepth 1 -type f -name *loopback.conf* -not -name *.mk_disabled -exec sh -c "grep -q loopback {} && ( grep -q name {} || sudo sed -i '/"type": "loopback"/i \ \ \ \ "name": "loopback",' {} ) && sudo sed -i 's|"cniVersion": ".*"|"cniVersion": "1.0.0"|g' {}" ;
I1129 07:27:24.278559   31296 cni.go:230] loopback cni configuration patched: "/etc/cni/net.d/*loopback.conf*" found
I1129 07:27:24.278666   31296 ssh_runner.go:195] Run: sudo find /etc/cni/net.d -maxdepth 1 -type f ( ( -name *bridge* -or -name *podman* ) -and -not -name *.mk_disabled ) -printf "%!p(MISSING), " -exec sh -c "sudo mv {} {}.mk_disabled" ;
I1129 07:27:24.322509   31296 cni.go:262] disabled [/etc/cni/net.d/100-crio-bridge.conf, /etc/cni/net.d/87-podman-bridge.conflist] bridge cni config(s)
I1129 07:27:24.322534   31296 start.go:472] detecting cgroup driver to use...
I1129 07:27:24.322569   31296 detect.go:199] detected "systemd" cgroup driver on host os
I1129 07:27:24.322697   31296 ssh_runner.go:195] Run: /bin/bash -c "sudo mkdir -p /etc && printf %!s(MISSING) "runtime-endpoint: unix:///run/containerd/containerd.sock
" | sudo tee /etc/crictl.yaml"
I1129 07:27:24.351281   31296 ssh_runner.go:195] Run: sh -c "sudo sed -i -r 's|^( *)sandbox_image = .*$|\1sandbox_image = "registry.k8s.io/pause:3.9"|' /etc/containerd/config.toml"
I1129 07:27:24.371837   31296 ssh_runner.go:195] Run: sh -c "sudo sed -i -r 's|^( *)restrict_oom_score_adj = .*$|\1restrict_oom_score_adj = false|' /etc/containerd/config.toml"
I1129 07:27:24.391429   31296 containerd.go:145] configuring containerd to use "systemd" as cgroup driver...
I1129 07:27:24.391510   31296 ssh_runner.go:195] Run: sh -c "sudo sed -i -r 's|^( *)SystemdCgroup = .*$|\1SystemdCgroup = true|g' /etc/containerd/config.toml"
I1129 07:27:24.411693   31296 ssh_runner.go:195] Run: sh -c "sudo sed -i 's|"io.containerd.runtime.v1.linux"|"io.containerd.runc.v2"|g' /etc/containerd/config.toml"
I1129 07:27:24.427161   31296 ssh_runner.go:195] Run: sh -c "sudo sed -i '/systemd_cgroup/d' /etc/containerd/config.toml"
I1129 07:27:24.444646   31296 ssh_runner.go:195] Run: sh -c "sudo sed -i 's|"io.containerd.runc.v1"|"io.containerd.runc.v2"|g' /etc/containerd/config.toml"
I1129 07:27:24.465307   31296 ssh_runner.go:195] Run: sh -c "sudo rm -rf /etc/cni/net.mk"
I1129 07:27:24.527438   31296 ssh_runner.go:195] Run: sh -c "sudo sed -i -r 's|^( *)conf_dir = .*$|\1conf_dir = "/etc/cni/net.d"|g' /etc/containerd/config.toml"
I1129 07:27:24.542673   31296 ssh_runner.go:195] Run: sudo sysctl net.bridge.bridge-nf-call-iptables
I1129 07:27:24.561228   31296 ssh_runner.go:195] Run: sudo sh -c "echo 1 > /proc/sys/net/ipv4/ip_forward"
I1129 07:27:24.581448   31296 ssh_runner.go:195] Run: sudo systemctl daemon-reload
I1129 07:27:24.691930   31296 ssh_runner.go:195] Run: sudo systemctl restart containerd
I1129 07:27:24.851865   31296 start.go:472] detecting cgroup driver to use...
I1129 07:27:24.851925   31296 detect.go:199] detected "systemd" cgroup driver on host os
I1129 07:27:24.852003   31296 ssh_runner.go:195] Run: sudo systemctl cat docker.service
I1129 07:27:24.901048   31296 cruntime.go:279] skipping containerd shutdown because we are bound to it
I1129 07:27:24.901118   31296 ssh_runner.go:195] Run: sudo systemctl is-active --quiet service crio
I1129 07:27:24.949495   31296 ssh_runner.go:195] Run: /bin/bash -c "sudo mkdir -p /etc && printf %!s(MISSING) "runtime-endpoint: unix:///var/run/cri-dockerd.sock
" | sudo tee /etc/crictl.yaml"
I1129 07:27:24.976467   31296 ssh_runner.go:195] Run: which cri-dockerd
I1129 07:27:24.981988   31296 ssh_runner.go:195] Run: sudo mkdir -p /etc/systemd/system/cri-docker.service.d
I1129 07:27:24.995522   31296 ssh_runner.go:362] scp memory --> /etc/systemd/system/cri-docker.service.d/10-cni.conf (189 bytes)
I1129 07:27:25.021498   31296 ssh_runner.go:195] Run: sudo systemctl unmask docker.service
I1129 07:27:25.327180   31296 ssh_runner.go:195] Run: sudo systemctl enable docker.socket
I1129 07:27:25.434206   31296 docker.go:560] configuring docker to use "systemd" as cgroup driver...
I1129 07:27:25.434303   31296 ssh_runner.go:362] scp memory --> /etc/docker/daemon.json (129 bytes)
I1129 07:27:25.462151   31296 ssh_runner.go:195] Run: sudo systemctl daemon-reload
I1129 07:27:25.583995   31296 ssh_runner.go:195] Run: sudo systemctl restart docker
I1129 07:27:27.988877   31296 ssh_runner.go:235] Completed: sudo systemctl restart docker: (2.404838343s)
I1129 07:27:27.988955   31296 ssh_runner.go:195] Run: sudo systemctl enable cri-docker.socket
I1129 07:27:28.194695   31296 ssh_runner.go:195] Run: sudo systemctl unmask cri-docker.socket
I1129 07:27:28.308191   31296 ssh_runner.go:195] Run: sudo systemctl enable cri-docker.socket
I1129 07:27:28.414271   31296 ssh_runner.go:195] Run: sudo systemctl daemon-reload
I1129 07:27:28.530312   31296 ssh_runner.go:195] Run: sudo systemctl restart cri-docker.socket
I1129 07:27:28.588581   31296 ssh_runner.go:195] Run: sudo systemctl daemon-reload
I1129 07:27:28.686906   31296 ssh_runner.go:195] Run: sudo systemctl restart cri-docker
I1129 07:27:29.244063   31296 start.go:519] Will wait 60s for socket path /var/run/cri-dockerd.sock
I1129 07:27:29.244169   31296 ssh_runner.go:195] Run: stat /var/run/cri-dockerd.sock
I1129 07:27:29.249016   31296 start.go:540] Will wait 60s for crictl version
I1129 07:27:29.249063   31296 ssh_runner.go:195] Run: which crictl
I1129 07:27:29.254696   31296 ssh_runner.go:195] Run: sudo /usr/bin/crictl version
I1129 07:27:29.901193   31296 start.go:556] Version:  0.1.0
RuntimeName:  docker
RuntimeVersion:  24.0.7
RuntimeApiVersion:  v1
I1129 07:27:29.901253   31296 ssh_runner.go:195] Run: docker version --format {{.Server.Version}}
I1129 07:27:30.250273   31296 ssh_runner.go:195] Run: docker version --format {{.Server.Version}}
I1129 07:27:30.334160   31296 out.go:204] 🐳  Preparing Kubernetes v1.28.3 on Docker 24.0.7 ...
I1129 07:27:30.334449   31296 cli_runner.go:164] Run: docker network inspect minikube --format "{"Name": "{{.Name}}","Driver": "{{.Driver}}","Subnet": "{{range .IPAM.Config}}{{.Subnet}}{{end}}","Gateway": "{{range .IPAM.Config}}{{.Gateway}}{{end}}","MTU": {{if (index .Options "com.docker.network.driver.mtu")}}{{(index .Options "com.docker.network.driver.mtu")}}{{else}}0{{end}}, "ContainerIPs": [{{range $k,$v := .Containers }}"{{$v.IPv4Address}}",{{end}}]}"
I1129 07:27:30.402103   31296 ssh_runner.go:195] Run: grep 192.168.49.1	host.minikube.internal$ /etc/hosts
I1129 07:27:30.407974   31296 ssh_runner.go:195] Run: /bin/bash -c "{ grep -v $'\thost.minikube.internal$' "/etc/hosts"; echo "192.168.49.1	host.minikube.internal"; } > /tmp/h.$$; sudo cp /tmp/h.$$ "/etc/hosts""
I1129 07:27:30.425390   31296 preload.go:132] Checking if preload exists for k8s version v1.28.3 and runtime docker
I1129 07:27:30.425449   31296 ssh_runner.go:195] Run: docker images --format {{.Repository}}:{{.Tag}}
I1129 07:27:30.452880   31296 docker.go:671] Got preloaded images: -- stdout --
registry.k8s.io/kube-apiserver:v1.28.3
registry.k8s.io/kube-controller-manager:v1.28.3
registry.k8s.io/kube-scheduler:v1.28.3
registry.k8s.io/kube-proxy:v1.28.3
registry.k8s.io/etcd:3.5.9-0
registry.k8s.io/coredns/coredns:v1.10.1
registry.k8s.io/pause:3.9
gcr.io/k8s-minikube/storage-provisioner:v5

-- /stdout --
I1129 07:27:30.452898   31296 docker.go:601] Images already preloaded, skipping extraction
I1129 07:27:30.452956   31296 ssh_runner.go:195] Run: docker images --format {{.Repository}}:{{.Tag}}
I1129 07:27:30.485720   31296 docker.go:671] Got preloaded images: -- stdout --
registry.k8s.io/kube-apiserver:v1.28.3
registry.k8s.io/kube-controller-manager:v1.28.3
registry.k8s.io/kube-scheduler:v1.28.3
registry.k8s.io/kube-proxy:v1.28.3
registry.k8s.io/etcd:3.5.9-0
registry.k8s.io/coredns/coredns:v1.10.1
registry.k8s.io/pause:3.9
gcr.io/k8s-minikube/storage-provisioner:v5

-- /stdout --
I1129 07:27:30.485737   31296 cache_images.go:84] Images are preloaded, skipping loading
I1129 07:27:30.485801   31296 ssh_runner.go:195] Run: docker info --format {{.CgroupDriver}}
I1129 07:27:30.585366   31296 cni.go:84] Creating CNI manager for ""
I1129 07:27:30.585389   31296 cni.go:158] "docker" driver + "docker" container runtime found on kubernetes v1.24+, recommending bridge
I1129 07:27:30.605184   31296 kubeadm.go:87] Using pod CIDR: 10.244.0.0/16
I1129 07:27:30.605230   31296 kubeadm.go:176] kubeadm options: {CertDir:/var/lib/minikube/certs ServiceCIDR:10.96.0.0/12 PodSubnet:10.244.0.0/16 AdvertiseAddress:192.168.49.2 APIServerPort:8443 KubernetesVersion:v1.28.3 EtcdDataDir:/var/lib/minikube/etcd EtcdExtraArgs:map[] ClusterName:minikube NodeName:minikube DNSDomain:cluster.local CRISocket:/var/run/cri-dockerd.sock ImageRepository: ComponentOptions:[{Component:apiServer ExtraArgs:map[enable-admission-plugins:NamespaceLifecycle,LimitRanger,ServiceAccount,DefaultStorageClass,DefaultTolerationSeconds,NodeRestriction,MutatingAdmissionWebhook,ValidatingAdmissionWebhook,ResourceQuota] Pairs:map[certSANs:["127.0.0.1", "localhost", "192.168.49.2"]]} {Component:controllerManager ExtraArgs:map[allocate-node-cidrs:true leader-elect:false] Pairs:map[]} {Component:scheduler ExtraArgs:map[leader-elect:false] Pairs:map[]}] FeatureArgs:map[] NodeIP:192.168.49.2 CgroupDriver:systemd ClientCAFile:/var/lib/minikube/certs/ca.crt StaticPodPath:/etc/kubernetes/manifests ControlPlaneAddress:control-plane.minikube.internal KubeProxyOptions:map[] ResolvConfSearchRegression:false KubeletConfigOpts:map[hairpinMode:hairpin-veth runtimeRequestTimeout:15m] PrependCriSocketUnix:true}
I1129 07:27:30.605429   31296 kubeadm.go:181] kubeadm config:
apiVersion: kubeadm.k8s.io/v1beta3
kind: InitConfiguration
localAPIEndpoint:
  advertiseAddress: 192.168.49.2
  bindPort: 8443
bootstrapTokens:
  - groups:
      - system:bootstrappers:kubeadm:default-node-token
    ttl: 24h0m0s
    usages:
      - signing
      - authentication
nodeRegistration:
  criSocket: unix:///var/run/cri-dockerd.sock
  name: "minikube"
  kubeletExtraArgs:
    node-ip: 192.168.49.2
  taints: []
---
apiVersion: kubeadm.k8s.io/v1beta3
kind: ClusterConfiguration
apiServer:
  certSANs: ["127.0.0.1", "localhost", "192.168.49.2"]
  extraArgs:
    enable-admission-plugins: "NamespaceLifecycle,LimitRanger,ServiceAccount,DefaultStorageClass,DefaultTolerationSeconds,NodeRestriction,MutatingAdmissionWebhook,ValidatingAdmissionWebhook,ResourceQuota"
controllerManager:
  extraArgs:
    allocate-node-cidrs: "true"
    leader-elect: "false"
scheduler:
  extraArgs:
    leader-elect: "false"
certificatesDir: /var/lib/minikube/certs
clusterName: mk
controlPlaneEndpoint: control-plane.minikube.internal:8443
etcd:
  local:
    dataDir: /var/lib/minikube/etcd
    extraArgs:
      proxy-refresh-interval: "70000"
kubernetesVersion: v1.28.3
networking:
  dnsDomain: cluster.local
  podSubnet: "10.244.0.0/16"
  serviceSubnet: 10.96.0.0/12
---
apiVersion: kubelet.config.k8s.io/v1beta1
kind: KubeletConfiguration
authentication:
  x509:
    clientCAFile: /var/lib/minikube/certs/ca.crt
cgroupDriver: systemd
hairpinMode: hairpin-veth
runtimeRequestTimeout: 15m
clusterDomain: "cluster.local"
# disable disk resource management by default
imageGCHighThresholdPercent: 100
evictionHard:
  nodefs.available: "0%!"(MISSING)
  nodefs.inodesFree: "0%!"(MISSING)
  imagefs.available: "0%!"(MISSING)
failSwapOn: false
staticPodPath: /etc/kubernetes/manifests
---
apiVersion: kubeproxy.config.k8s.io/v1alpha1
kind: KubeProxyConfiguration
clusterCIDR: "10.244.0.0/16"
metricsBindAddress: 0.0.0.0:10249
conntrack:
  maxPerCore: 0
# Skip setting "net.netfilter.nf_conntrack_tcp_timeout_established"
  tcpEstablishedTimeout: 0s
# Skip setting "net.netfilter.nf_conntrack_tcp_timeout_close"
  tcpCloseWaitTimeout: 0s

I1129 07:27:30.605506   31296 kubeadm.go:976] kubelet [Unit]
Wants=docker.socket

[Service]
ExecStart=
ExecStart=/var/lib/minikube/binaries/v1.28.3/kubelet --bootstrap-kubeconfig=/etc/kubernetes/bootstrap-kubelet.conf --config=/var/lib/kubelet/config.yaml --container-runtime-endpoint=unix:///var/run/cri-dockerd.sock --hostname-override=minikube --kubeconfig=/etc/kubernetes/kubelet.conf --node-ip=192.168.49.2

[Install]
 config:
{KubernetesVersion:v1.28.3 ClusterName:minikube Namespace:default APIServerName:minikubeCA APIServerNames:[] APIServerIPs:[] DNSDomain:cluster.local ContainerRuntime:docker CRISocket: NetworkPlugin:cni FeatureGates: ServiceCIDR:10.96.0.0/12 ImageRepository: LoadBalancerStartIP: LoadBalancerEndIP: CustomIngressCert: RegistryAliases: ExtraOptions:[] ShouldLoadCachedImages:true EnableDefaultCNI:false CNI: NodeIP: NodePort:8443 NodeName:}
I1129 07:27:30.605583   31296 ssh_runner.go:195] Run: sudo ls /var/lib/minikube/binaries/v1.28.3
I1129 07:27:30.690387   31296 binaries.go:44] Found k8s binaries, skipping transfer
I1129 07:27:30.690488   31296 ssh_runner.go:195] Run: sudo mkdir -p /etc/systemd/system/kubelet.service.d /lib/systemd/system /var/tmp/minikube
I1129 07:27:30.711254   31296 ssh_runner.go:362] scp memory --> /etc/systemd/system/kubelet.service.d/10-kubeadm.conf (369 bytes)
I1129 07:27:30.748087   31296 ssh_runner.go:362] scp memory --> /lib/systemd/system/kubelet.service (352 bytes)
I1129 07:27:30.787276   31296 ssh_runner.go:362] scp memory --> /var/tmp/minikube/kubeadm.yaml.new (2090 bytes)
I1129 07:27:30.821203   31296 ssh_runner.go:195] Run: grep 192.168.49.2	control-plane.minikube.internal$ /etc/hosts
I1129 07:27:30.856366   31296 ssh_runner.go:195] Run: /bin/bash -c "{ grep -v $'\tcontrol-plane.minikube.internal$' "/etc/hosts"; echo "192.168.49.2	control-plane.minikube.internal"; } > /tmp/h.$$; sudo cp /tmp/h.$$ "/etc/hosts""
I1129 07:27:30.881855   31296 certs.go:56] Setting up /home/flynn/.minikube/profiles/minikube for IP: 192.168.49.2
I1129 07:27:30.881892   31296 certs.go:190] acquiring lock for shared ca certs: {Name:mk0b5c715c2bb6b0ea47598c14ad7a9895fc013f Clock:{} Delay:500ms Timeout:1m0s Cancel:<nil>}
I1129 07:27:30.882011   31296 certs.go:204] generating minikubeCA CA: /home/flynn/.minikube/ca.key
I1129 07:27:31.086276   31296 crypto.go:156] Writing cert to /home/flynn/.minikube/ca.crt ...
I1129 07:27:31.086292   31296 lock.go:35] WriteFile acquiring /home/flynn/.minikube/ca.crt: {Name:mk8e56e7a7d058b3d18f1540ab14e500aa389ce2 Clock:{} Delay:500ms Timeout:1m0s Cancel:<nil>}
I1129 07:27:31.086466   31296 crypto.go:164] Writing key to /home/flynn/.minikube/ca.key ...
I1129 07:27:31.086475   31296 lock.go:35] WriteFile acquiring /home/flynn/.minikube/ca.key: {Name:mk4090875ecffbf0888bc4fa2917a940541e9613 Clock:{} Delay:500ms Timeout:1m0s Cancel:<nil>}
I1129 07:27:31.086605   31296 certs.go:204] generating proxyClientCA CA: /home/flynn/.minikube/proxy-client-ca.key
I1129 07:27:31.169971   31296 crypto.go:156] Writing cert to /home/flynn/.minikube/proxy-client-ca.crt ...
I1129 07:27:31.169985   31296 lock.go:35] WriteFile acquiring /home/flynn/.minikube/proxy-client-ca.crt: {Name:mk2afcb8e44fa3aafb89f283b149829cdc85594a Clock:{} Delay:500ms Timeout:1m0s Cancel:<nil>}
I1129 07:27:31.170138   31296 crypto.go:164] Writing key to /home/flynn/.minikube/proxy-client-ca.key ...
I1129 07:27:31.170146   31296 lock.go:35] WriteFile acquiring /home/flynn/.minikube/proxy-client-ca.key: {Name:mk1f7c0c8ec85fdc2b219cb2cc2afc726d67647b Clock:{} Delay:500ms Timeout:1m0s Cancel:<nil>}
I1129 07:27:31.170246   31296 certs.go:319] generating minikube-user signed cert: /home/flynn/.minikube/profiles/minikube/client.key
I1129 07:27:31.170263   31296 crypto.go:68] Generating cert /home/flynn/.minikube/profiles/minikube/client.crt with IP's: []
I1129 07:27:31.341694   31296 crypto.go:156] Writing cert to /home/flynn/.minikube/profiles/minikube/client.crt ...
I1129 07:27:31.341714   31296 lock.go:35] WriteFile acquiring /home/flynn/.minikube/profiles/minikube/client.crt: {Name:mka7800db82de6fbb53b77672ee0a866b1018daa Clock:{} Delay:500ms Timeout:1m0s Cancel:<nil>}
I1129 07:27:31.341875   31296 crypto.go:164] Writing key to /home/flynn/.minikube/profiles/minikube/client.key ...
I1129 07:27:31.341884   31296 lock.go:35] WriteFile acquiring /home/flynn/.minikube/profiles/minikube/client.key: {Name:mk8398954ce08fb039e8b04b77ae4b379e3713b2 Clock:{} Delay:500ms Timeout:1m0s Cancel:<nil>}
I1129 07:27:31.341956   31296 certs.go:319] generating minikube signed cert: /home/flynn/.minikube/profiles/minikube/apiserver.key.dd3b5fb2
I1129 07:27:31.341979   31296 crypto.go:68] Generating cert /home/flynn/.minikube/profiles/minikube/apiserver.crt.dd3b5fb2 with IP's: [192.168.49.2 10.96.0.1 127.0.0.1 10.0.0.1]
I1129 07:27:31.542132   31296 crypto.go:156] Writing cert to /home/flynn/.minikube/profiles/minikube/apiserver.crt.dd3b5fb2 ...
I1129 07:27:31.542150   31296 lock.go:35] WriteFile acquiring /home/flynn/.minikube/profiles/minikube/apiserver.crt.dd3b5fb2: {Name:mk5f57b592e276d1c8f994d1291a64a03243c8cc Clock:{} Delay:500ms Timeout:1m0s Cancel:<nil>}
I1129 07:27:31.542336   31296 crypto.go:164] Writing key to /home/flynn/.minikube/profiles/minikube/apiserver.key.dd3b5fb2 ...
I1129 07:27:31.542345   31296 lock.go:35] WriteFile acquiring /home/flynn/.minikube/profiles/minikube/apiserver.key.dd3b5fb2: {Name:mk1d3315d1c9fdaf30e5e1475112f2c0b5cc26cc Clock:{} Delay:500ms Timeout:1m0s Cancel:<nil>}
I1129 07:27:31.542415   31296 certs.go:337] copying /home/flynn/.minikube/profiles/minikube/apiserver.crt.dd3b5fb2 -> /home/flynn/.minikube/profiles/minikube/apiserver.crt
I1129 07:27:31.542503   31296 certs.go:341] copying /home/flynn/.minikube/profiles/minikube/apiserver.key.dd3b5fb2 -> /home/flynn/.minikube/profiles/minikube/apiserver.key
I1129 07:27:31.542573   31296 certs.go:319] generating aggregator signed cert: /home/flynn/.minikube/profiles/minikube/proxy-client.key
I1129 07:27:31.542592   31296 crypto.go:68] Generating cert /home/flynn/.minikube/profiles/minikube/proxy-client.crt with IP's: []
I1129 07:27:31.868531   31296 crypto.go:156] Writing cert to /home/flynn/.minikube/profiles/minikube/proxy-client.crt ...
I1129 07:27:31.868548   31296 lock.go:35] WriteFile acquiring /home/flynn/.minikube/profiles/minikube/proxy-client.crt: {Name:mk26ee9d0dcdfd207e90c40d209e077744e84a7c Clock:{} Delay:500ms Timeout:1m0s Cancel:<nil>}
I1129 07:27:31.868712   31296 crypto.go:164] Writing key to /home/flynn/.minikube/profiles/minikube/proxy-client.key ...
I1129 07:27:31.868720   31296 lock.go:35] WriteFile acquiring /home/flynn/.minikube/profiles/minikube/proxy-client.key: {Name:mka32ece87b090a166ae3b85fd22c36a595331a7 Clock:{} Delay:500ms Timeout:1m0s Cancel:<nil>}
I1129 07:27:31.868902   31296 certs.go:437] found cert: /home/flynn/.minikube/certs/home/flynn/.minikube/certs/ca-key.pem (1675 bytes)
I1129 07:27:31.868943   31296 certs.go:437] found cert: /home/flynn/.minikube/certs/home/flynn/.minikube/certs/ca.pem (1074 bytes)
I1129 07:27:31.868968   31296 certs.go:437] found cert: /home/flynn/.minikube/certs/home/flynn/.minikube/certs/cert.pem (1119 bytes)
I1129 07:27:31.868993   31296 certs.go:437] found cert: /home/flynn/.minikube/certs/home/flynn/.minikube/certs/key.pem (1679 bytes)
I1129 07:27:31.959965   31296 ssh_runner.go:362] scp /home/flynn/.minikube/profiles/minikube/apiserver.crt --> /var/lib/minikube/certs/apiserver.crt (1399 bytes)
I1129 07:27:32.011884   31296 ssh_runner.go:362] scp /home/flynn/.minikube/profiles/minikube/apiserver.key --> /var/lib/minikube/certs/apiserver.key (1675 bytes)
I1129 07:27:32.064318   31296 ssh_runner.go:362] scp /home/flynn/.minikube/profiles/minikube/proxy-client.crt --> /var/lib/minikube/certs/proxy-client.crt (1147 bytes)
I1129 07:27:32.118555   31296 ssh_runner.go:362] scp /home/flynn/.minikube/profiles/minikube/proxy-client.key --> /var/lib/minikube/certs/proxy-client.key (1675 bytes)
I1129 07:27:32.170744   31296 ssh_runner.go:362] scp /home/flynn/.minikube/ca.crt --> /var/lib/minikube/certs/ca.crt (1111 bytes)
I1129 07:27:32.221075   31296 ssh_runner.go:362] scp /home/flynn/.minikube/ca.key --> /var/lib/minikube/certs/ca.key (1679 bytes)
I1129 07:27:32.267133   31296 ssh_runner.go:362] scp /home/flynn/.minikube/proxy-client-ca.crt --> /var/lib/minikube/certs/proxy-client-ca.crt (1119 bytes)
I1129 07:27:32.318172   31296 ssh_runner.go:362] scp /home/flynn/.minikube/proxy-client-ca.key --> /var/lib/minikube/certs/proxy-client-ca.key (1679 bytes)
I1129 07:27:32.371329   31296 ssh_runner.go:362] scp /home/flynn/.minikube/ca.crt --> /usr/share/ca-certificates/minikubeCA.pem (1111 bytes)
I1129 07:27:32.426220   31296 ssh_runner.go:362] scp memory --> /var/lib/minikube/kubeconfig (738 bytes)
I1129 07:27:32.459502   31296 ssh_runner.go:195] Run: openssl version
I1129 07:27:32.509495   31296 ssh_runner.go:195] Run: sudo /bin/bash -c "test -s /usr/share/ca-certificates/minikubeCA.pem && ln -fs /usr/share/ca-certificates/minikubeCA.pem /etc/ssl/certs/minikubeCA.pem"
I1129 07:27:32.546219   31296 ssh_runner.go:195] Run: ls -la /usr/share/ca-certificates/minikubeCA.pem
I1129 07:27:32.554952   31296 certs.go:480] hashing: -rw-r--r-- 1 root root 1111 Nov 29 01:57 /usr/share/ca-certificates/minikubeCA.pem
I1129 07:27:32.555042   31296 ssh_runner.go:195] Run: openssl x509 -hash -noout -in /usr/share/ca-certificates/minikubeCA.pem
I1129 07:27:32.599401   31296 ssh_runner.go:195] Run: sudo /bin/bash -c "test -L /etc/ssl/certs/b5213941.0 || ln -fs /etc/ssl/certs/minikubeCA.pem /etc/ssl/certs/b5213941.0"
I1129 07:27:32.622940   31296 ssh_runner.go:195] Run: ls /var/lib/minikube/certs/etcd
I1129 07:27:32.631399   31296 certs.go:353] certs directory doesn't exist, likely first start: ls /var/lib/minikube/certs/etcd: Process exited with status 2
stdout:

stderr:
ls: cannot access '/var/lib/minikube/certs/etcd': No such file or directory
I1129 07:27:32.631462   31296 kubeadm.go:404] StartCluster: {Name:minikube KeepContext:false EmbedCerts:false MinikubeISO: KicBaseImage:gcr.io/k8s-minikube/kicbase:v0.0.42@sha256:d35ac07dfda971cabee05e0deca8aeac772f885a5348e1a0c0b0a36db20fcfc0 Memory:2200 CPUs:2 DiskSize:20000 VMDriver: Driver:docker HyperkitVpnKitSock: HyperkitVSockPorts:[] DockerEnv:[] ContainerVolumeMounts:[] InsecureRegistry:[] RegistryMirror:[] HostOnlyCIDR:192.168.59.1/24 HypervVirtualSwitch: HypervUseExternalSwitch:false HypervExternalAdapter: KVMNetwork:default KVMQemuURI:qemu:///system KVMGPU:false KVMHidden:false KVMNUMACount:1 APIServerPort:0 DockerOpt:[] DisableDriverMounts:false NFSShare:[] NFSSharesRoot:/nfsshares UUID: NoVTXCheck:false DNSProxy:false HostDNSResolver:true HostOnlyNicType:virtio NatNicType:virtio SSHIPAddress: SSHUser:root SSHKey: SSHPort:22 KubernetesConfig:{KubernetesVersion:v1.28.3 ClusterName:minikube Namespace:default APIServerName:minikubeCA APIServerNames:[] APIServerIPs:[] DNSDomain:cluster.local ContainerRuntime:docker CRISocket: NetworkPlugin:cni FeatureGates: ServiceCIDR:10.96.0.0/12 ImageRepository: LoadBalancerStartIP: LoadBalancerEndIP: CustomIngressCert: RegistryAliases: ExtraOptions:[] ShouldLoadCachedImages:true EnableDefaultCNI:false CNI: NodeIP: NodePort:8443 NodeName:} Nodes:[{Name: IP:192.168.49.2 Port:8443 KubernetesVersion:v1.28.3 ContainerRuntime:docker ControlPlane:true Worker:true}] Addons:map[] CustomAddonImages:map[] CustomAddonRegistries:map[] VerifyComponents:map[apiserver:true system_pods:true] StartHostTimeout:6m0s ScheduledStop:<nil> ExposedPorts:[] ListenAddress: Network: Subnet: MultiNodeRequested:false ExtraDisks:0 CertExpiration:26280h0m0s Mount:false MountString:/home/flynn:/minikube-host Mount9PVersion:9p2000.L MountGID:docker MountIP: MountMSize:262144 MountOptions:[] MountPort:0 MountType:9p MountUID:docker BinaryMirror: DisableOptimizations:false DisableMetrics:false CustomQemuFirmwarePath: SocketVMnetClientPath: SocketVMnetPath: StaticIP: SSHAuthSock: SSHAgentPID:0 AutoPauseInterval:1m0s GPUs:}
I1129 07:27:32.631618   31296 ssh_runner.go:195] Run: docker ps --filter status=paused --filter=name=k8s_.*_(kube-system)_ --format={{.ID}}
I1129 07:27:32.661367   31296 ssh_runner.go:195] Run: sudo ls /var/lib/kubelet/kubeadm-flags.env /var/lib/kubelet/config.yaml /var/lib/minikube/etcd
I1129 07:27:32.675192   31296 ssh_runner.go:195] Run: sudo cp /var/tmp/minikube/kubeadm.yaml.new /var/tmp/minikube/kubeadm.yaml
I1129 07:27:32.695512   31296 kubeadm.go:226] ignoring SystemVerification for kubeadm because of docker driver
I1129 07:27:32.695589   31296 ssh_runner.go:195] Run: sudo ls -la /etc/kubernetes/admin.conf /etc/kubernetes/kubelet.conf /etc/kubernetes/controller-manager.conf /etc/kubernetes/scheduler.conf
I1129 07:27:32.709955   31296 kubeadm.go:152] config check failed, skipping stale config cleanup: sudo ls -la /etc/kubernetes/admin.conf /etc/kubernetes/kubelet.conf /etc/kubernetes/controller-manager.conf /etc/kubernetes/scheduler.conf: Process exited with status 2
stdout:

stderr:
ls: cannot access '/etc/kubernetes/admin.conf': No such file or directory
ls: cannot access '/etc/kubernetes/kubelet.conf': No such file or directory
ls: cannot access '/etc/kubernetes/controller-manager.conf': No such file or directory
ls: cannot access '/etc/kubernetes/scheduler.conf': No such file or directory
I1129 07:27:32.710035   31296 ssh_runner.go:286] Start: /bin/bash -c "sudo env PATH="/var/lib/minikube/binaries/v1.28.3:$PATH" kubeadm init --config /var/tmp/minikube/kubeadm.yaml  --ignore-preflight-errors=DirAvailable--etc-kubernetes-manifests,DirAvailable--var-lib-minikube,DirAvailable--var-lib-minikube-etcd,FileAvailable--etc-kubernetes-manifests-kube-scheduler.yaml,FileAvailable--etc-kubernetes-manifests-kube-apiserver.yaml,FileAvailable--etc-kubernetes-manifests-kube-controller-manager.yaml,FileAvailable--etc-kubernetes-manifests-etcd.yaml,Port-10250,Swap,NumCPU,Mem,SystemVerification,FileContent--proc-sys-net-bridge-bridge-nf-call-iptables"
I1129 07:27:32.898731   31296 kubeadm.go:322] [init] Using Kubernetes version: v1.28.3
I1129 07:27:32.899353   31296 kubeadm.go:322] [preflight] Running pre-flight checks
I1129 07:27:33.124545   31296 kubeadm.go:322] [preflight] Pulling images required for setting up a Kubernetes cluster
I1129 07:27:33.124972   31296 kubeadm.go:322] [preflight] This might take a minute or two, depending on the speed of your internet connection
I1129 07:27:33.125447   31296 kubeadm.go:322] [preflight] You can also perform this action in beforehand using 'kubeadm config images pull'
I1129 07:27:33.532897   31296 kubeadm.go:322] [certs] Using certificateDir folder "/var/lib/minikube/certs"
I1129 07:27:33.572814   31296 out.go:204]     ▪ Generating certificates and keys ...
I1129 07:27:33.573061   31296 kubeadm.go:322] [certs] Using existing ca certificate authority
I1129 07:27:33.573368   31296 kubeadm.go:322] [certs] Using existing apiserver certificate and key on disk
I1129 07:27:33.791811   31296 kubeadm.go:322] [certs] Generating "apiserver-kubelet-client" certificate and key
I1129 07:27:34.011376   31296 kubeadm.go:322] [certs] Generating "front-proxy-ca" certificate and key
I1129 07:27:34.072690   31296 kubeadm.go:322] [certs] Generating "front-proxy-client" certificate and key
I1129 07:27:34.198545   31296 kubeadm.go:322] [certs] Generating "etcd/ca" certificate and key
I1129 07:27:34.275554   31296 kubeadm.go:322] [certs] Generating "etcd/server" certificate and key
I1129 07:27:34.275934   31296 kubeadm.go:322] [certs] etcd/server serving cert is signed for DNS names [localhost minikube] and IPs [192.168.49.2 127.0.0.1 ::1]
I1129 07:27:34.429247   31296 kubeadm.go:322] [certs] Generating "etcd/peer" certificate and key
I1129 07:27:34.429695   31296 kubeadm.go:322] [certs] etcd/peer serving cert is signed for DNS names [localhost minikube] and IPs [192.168.49.2 127.0.0.1 ::1]
I1129 07:27:34.570918   31296 kubeadm.go:322] [certs] Generating "etcd/healthcheck-client" certificate and key
I1129 07:27:34.770229   31296 kubeadm.go:322] [certs] Generating "apiserver-etcd-client" certificate and key
I1129 07:27:35.078085   31296 kubeadm.go:322] [certs] Generating "sa" key and public key
I1129 07:27:35.078920   31296 kubeadm.go:322] [kubeconfig] Using kubeconfig folder "/etc/kubernetes"
I1129 07:27:35.244239   31296 kubeadm.go:322] [kubeconfig] Writing "admin.conf" kubeconfig file
I1129 07:27:35.379966   31296 kubeadm.go:322] [kubeconfig] Writing "kubelet.conf" kubeconfig file
I1129 07:27:35.585529   31296 kubeadm.go:322] [kubeconfig] Writing "controller-manager.conf" kubeconfig file
I1129 07:27:35.773321   31296 kubeadm.go:322] [kubeconfig] Writing "scheduler.conf" kubeconfig file
I1129 07:27:35.774445   31296 kubeadm.go:322] [etcd] Creating static Pod manifest for local etcd in "/etc/kubernetes/manifests"
I1129 07:27:35.779440   31296 kubeadm.go:322] [control-plane] Using manifest folder "/etc/kubernetes/manifests"
I1129 07:27:35.943635   31296 out.go:204]     ▪ Booting up control plane ...
I1129 07:27:35.944643   31296 kubeadm.go:322] [control-plane] Creating static Pod manifest for "kube-apiserver"
I1129 07:27:35.945549   31296 kubeadm.go:322] [control-plane] Creating static Pod manifest for "kube-controller-manager"
I1129 07:27:35.946374   31296 kubeadm.go:322] [control-plane] Creating static Pod manifest for "kube-scheduler"
I1129 07:27:35.947687   31296 kubeadm.go:322] [kubelet-start] Writing kubelet environment file with flags to file "/var/lib/kubelet/kubeadm-flags.env"
I1129 07:27:35.948802   31296 kubeadm.go:322] [kubelet-start] Writing kubelet configuration to file "/var/lib/kubelet/config.yaml"
I1129 07:27:35.949286   31296 kubeadm.go:322] [kubelet-start] Starting the kubelet
I1129 07:27:36.019121   31296 kubeadm.go:322] [wait-control-plane] Waiting for the kubelet to boot up the control plane as static Pods from directory "/etc/kubernetes/manifests". This can take up to 4m0s
I1129 07:27:51.528536   31296 kubeadm.go:322] [apiclient] All control plane components are healthy after 15.510254 seconds
I1129 07:27:51.529065   31296 kubeadm.go:322] [upload-config] Storing the configuration used in ConfigMap "kubeadm-config" in the "kube-system" Namespace
I1129 07:27:51.642933   31296 kubeadm.go:322] [kubelet] Creating a ConfigMap "kubelet-config" in namespace kube-system with the configuration for the kubelets in the cluster
I1129 07:27:52.561030   31296 kubeadm.go:322] [upload-certs] Skipping phase. Please see --upload-certs
I1129 07:27:52.561899   31296 kubeadm.go:322] [mark-control-plane] Marking the node minikube as control-plane by adding the labels: [node-role.kubernetes.io/control-plane node.kubernetes.io/exclude-from-external-load-balancers]
I1129 07:27:53.097158   31296 kubeadm.go:322] [bootstrap-token] Using token: 0jhxqs.jhf0p34x9p88imru
I1129 07:27:53.116266   31296 out.go:204]     ▪ Configuring RBAC rules ...
I1129 07:27:53.117443   31296 kubeadm.go:322] [bootstrap-token] Configuring bootstrap tokens, cluster-info ConfigMap, RBAC Roles
I1129 07:27:53.542537   31296 kubeadm.go:322] [bootstrap-token] Configured RBAC rules to allow Node Bootstrap tokens to get nodes
I1129 07:27:53.576690   31296 kubeadm.go:322] [bootstrap-token] Configured RBAC rules to allow Node Bootstrap tokens to post CSRs in order for nodes to get long term certificate credentials
I1129 07:27:53.597704   31296 kubeadm.go:322] [bootstrap-token] Configured RBAC rules to allow the csrapprover controller automatically approve CSRs from a Node Bootstrap Token
I1129 07:27:53.621424   31296 kubeadm.go:322] [bootstrap-token] Configured RBAC rules to allow certificate rotation for all node client certificates in the cluster
I1129 07:27:53.677943   31296 kubeadm.go:322] [bootstrap-token] Creating the "cluster-info" ConfigMap in the "kube-public" namespace
I1129 07:27:53.745608   31296 kubeadm.go:322] [kubelet-finalize] Updating "/etc/kubernetes/kubelet.conf" to point to a rotatable kubelet client certificate and key
I1129 07:27:54.848293   31296 kubeadm.go:322] [addons] Applied essential addon: CoreDNS
I1129 07:27:55.157619   31296 kubeadm.go:322] [addons] Applied essential addon: kube-proxy
I1129 07:27:55.159351   31296 kubeadm.go:322] 
I1129 07:27:55.160248   31296 kubeadm.go:322] Your Kubernetes control-plane has initialized successfully!
I1129 07:27:55.160294   31296 kubeadm.go:322] 
I1129 07:27:55.161047   31296 kubeadm.go:322] To start using your cluster, you need to run the following as a regular user:
I1129 07:27:55.161059   31296 kubeadm.go:322] 
I1129 07:27:55.161254   31296 kubeadm.go:322]   mkdir -p $HOME/.kube
I1129 07:27:55.161743   31296 kubeadm.go:322]   sudo cp -i /etc/kubernetes/admin.conf $HOME/.kube/config
I1129 07:27:55.161959   31296 kubeadm.go:322]   sudo chown $(id -u):$(id -g) $HOME/.kube/config
I1129 07:27:55.161977   31296 kubeadm.go:322] 
I1129 07:27:55.162183   31296 kubeadm.go:322] Alternatively, if you are the root user, you can run:
I1129 07:27:55.162196   31296 kubeadm.go:322] 
I1129 07:27:55.162389   31296 kubeadm.go:322]   export KUBECONFIG=/etc/kubernetes/admin.conf
I1129 07:27:55.162404   31296 kubeadm.go:322] 
I1129 07:27:55.162846   31296 kubeadm.go:322] You should now deploy a pod network to the cluster.
I1129 07:27:55.163630   31296 kubeadm.go:322] Run "kubectl apply -f [podnetwork].yaml" with one of the options listed at:
I1129 07:27:55.163867   31296 kubeadm.go:322]   https://kubernetes.io/docs/concepts/cluster-administration/addons/
I1129 07:27:55.163888   31296 kubeadm.go:322] 
I1129 07:27:55.164157   31296 kubeadm.go:322] You can now join any number of control-plane nodes by copying certificate authorities
I1129 07:27:55.164428   31296 kubeadm.go:322] and service account keys on each node and then running the following as root:
I1129 07:27:55.164443   31296 kubeadm.go:322] 
I1129 07:27:55.164727   31296 kubeadm.go:322]   kubeadm join control-plane.minikube.internal:8443 --token 0jhxqs.jhf0p34x9p88imru \
I1129 07:27:55.165071   31296 kubeadm.go:322] 	--discovery-token-ca-cert-hash sha256:ead57ce53db22d30a1a8fad96b217b40532ba484aeee99d24d485579838f3baf \
I1129 07:27:55.165315   31296 kubeadm.go:322] 	--control-plane 
I1129 07:27:55.165351   31296 kubeadm.go:322] 
I1129 07:27:55.165974   31296 kubeadm.go:322] Then you can join any number of worker nodes by running the following on each as root:
I1129 07:27:55.165994   31296 kubeadm.go:322] 
I1129 07:27:55.166468   31296 kubeadm.go:322] kubeadm join control-plane.minikube.internal:8443 --token 0jhxqs.jhf0p34x9p88imru \
I1129 07:27:55.167203   31296 kubeadm.go:322] 	--discovery-token-ca-cert-hash sha256:ead57ce53db22d30a1a8fad96b217b40532ba484aeee99d24d485579838f3baf 
I1129 07:27:55.177450   31296 kubeadm.go:322] 	[WARNING Swap]: swap is enabled; production deployments should disable swap unless testing the NodeSwap feature gate of the kubelet
I1129 07:27:55.177955   31296 kubeadm.go:322] 	[WARNING Service-Kubelet]: kubelet service is not enabled, please run 'systemctl enable kubelet.service'
I1129 07:27:55.178001   31296 cni.go:84] Creating CNI manager for ""
I1129 07:27:55.178025   31296 cni.go:158] "docker" driver + "docker" container runtime found on kubernetes v1.24+, recommending bridge
I1129 07:27:55.201555   31296 out.go:177] 🔗  Configuring bridge CNI (Container Networking Interface) ...
I1129 07:27:55.246619   31296 ssh_runner.go:195] Run: sudo mkdir -p /etc/cni/net.d
I1129 07:27:55.354151   31296 ssh_runner.go:362] scp memory --> /etc/cni/net.d/1-k8s.conflist (457 bytes)
I1129 07:27:55.421902   31296 ssh_runner.go:195] Run: /bin/bash -c "cat /proc/$(pgrep kube-apiserver)/oom_adj"
I1129 07:27:55.422097   31296 ssh_runner.go:195] Run: sudo /var/lib/minikube/binaries/v1.28.3/kubectl label nodes minikube.k8s.io/version=v1.32.0 minikube.k8s.io/commit=8220a6eb95f0a4d75f7f2d7b14cef975f050512d minikube.k8s.io/name=minikube minikube.k8s.io/updated_at=2023_11_29T07_27_55_0700 minikube.k8s.io/primary=true --all --overwrite --kubeconfig=/var/lib/minikube/kubeconfig
I1129 07:27:55.422102   31296 ssh_runner.go:195] Run: sudo /var/lib/minikube/binaries/v1.28.3/kubectl create clusterrolebinding minikube-rbac --clusterrole=cluster-admin --serviceaccount=kube-system:default --kubeconfig=/var/lib/minikube/kubeconfig
I1129 07:27:55.477191   31296 ops.go:34] apiserver oom_adj: -16
I1129 07:27:55.554565   31296 kubeadm.go:1081] duration metric: took 132.575095ms to wait for elevateKubeSystemPrivileges.
I1129 07:27:55.638844   31296 kubeadm.go:406] StartCluster complete in 23.007375969s
I1129 07:27:55.638890   31296 settings.go:142] acquiring lock: {Name:mk6d318681d4fbdd116745ef27a38da7e129cf4e Clock:{} Delay:500ms Timeout:1m0s Cancel:<nil>}
I1129 07:27:55.639035   31296 settings.go:150] Updating kubeconfig:  /home/flynn/.kube/config
I1129 07:27:55.733491   31296 lock.go:35] WriteFile acquiring /home/flynn/.kube/config: {Name:mk2e1df0caa231631eb9db9077309358cf3de17c Clock:{} Delay:500ms Timeout:1m0s Cancel:<nil>}
I1129 07:27:55.734067   31296 ssh_runner.go:195] Run: /bin/bash -c "sudo /var/lib/minikube/binaries/v1.28.3/kubectl --kubeconfig=/var/lib/minikube/kubeconfig -n kube-system get configmap coredns -o yaml"
I1129 07:27:55.734201   31296 addons.go:499] enable addons start: toEnable=map[ambassador:false auto-pause:false cloud-spanner:false csi-hostpath-driver:false dashboard:false default-storageclass:true efk:false freshpod:false gcp-auth:false gvisor:false headlamp:false helm-tiller:false inaccel:false ingress:false ingress-dns:false inspektor-gadget:false istio:false istio-provisioner:false kong:false kubeflow:false kubevirt:false logviewer:false metallb:false metrics-server:false nvidia-device-plugin:false nvidia-driver-installer:false nvidia-gpu-device-plugin:false olm:false pod-security-policy:false portainer:false registry:false registry-aliases:false registry-creds:false storage-provisioner:true storage-provisioner-gluster:false storage-provisioner-rancher:false volumesnapshots:false]
I1129 07:27:55.734324   31296 addons.go:69] Setting storage-provisioner=true in profile "minikube"
I1129 07:27:55.734358   31296 addons.go:231] Setting addon storage-provisioner=true in "minikube"
I1129 07:27:55.734362   31296 addons.go:69] Setting default-storageclass=true in profile "minikube"
I1129 07:27:55.734378   31296 config.go:182] Loaded profile config "minikube": Driver=docker, ContainerRuntime=docker, KubernetesVersion=v1.28.3
I1129 07:27:55.734392   31296 addons_storage_classes.go:33] enableOrDisableStorageClasses default-storageclass=true on "minikube"
I1129 07:27:55.734439   31296 host.go:66] Checking if "minikube" exists ...
I1129 07:27:55.734991   31296 cli_runner.go:164] Run: docker container inspect minikube --format={{.State.Status}}
I1129 07:27:55.735386   31296 cli_runner.go:164] Run: docker container inspect minikube --format={{.State.Status}}
I1129 07:27:55.973626   31296 out.go:177]     ▪ Using image gcr.io/k8s-minikube/storage-provisioner:v5
I1129 07:27:55.894669   31296 ssh_runner.go:195] Run: /bin/bash -c "sudo /var/lib/minikube/binaries/v1.28.3/kubectl --kubeconfig=/var/lib/minikube/kubeconfig -n kube-system get configmap coredns -o yaml | sed -e '/^        forward . \/etc\/resolv.conf.*/i \        hosts {\n           192.168.49.1 host.minikube.internal\n           fallthrough\n        }' -e '/^        errors *$/i \        log' | sudo /var/lib/minikube/binaries/v1.28.3/kubectl --kubeconfig=/var/lib/minikube/kubeconfig replace -f -"
I1129 07:27:56.052182   31296 addons.go:423] installing /etc/kubernetes/addons/storage-provisioner.yaml
I1129 07:27:56.052205   31296 ssh_runner.go:362] scp memory --> /etc/kubernetes/addons/storage-provisioner.yaml (2676 bytes)
I1129 07:27:56.052329   31296 cli_runner.go:164] Run: docker container inspect -f "'{{(index (index .NetworkSettings.Ports "22/tcp") 0).HostPort}}'" minikube
I1129 07:27:56.079056   31296 sshutil.go:53] new ssh client: &{IP:127.0.0.1 Port:32772 SSHKeyPath:/home/flynn/.minikube/machines/minikube/id_rsa Username:docker}
I1129 07:27:56.302271   31296 addons.go:231] Setting addon default-storageclass=true in "minikube"
I1129 07:27:56.302333   31296 host.go:66] Checking if "minikube" exists ...
I1129 07:27:56.303071   31296 cli_runner.go:164] Run: docker container inspect minikube --format={{.State.Status}}
I1129 07:27:56.327847   31296 addons.go:423] installing /etc/kubernetes/addons/storageclass.yaml
I1129 07:27:56.327871   31296 ssh_runner.go:362] scp memory --> /etc/kubernetes/addons/storageclass.yaml (271 bytes)
I1129 07:27:56.327979   31296 cli_runner.go:164] Run: docker container inspect -f "'{{(index (index .NetworkSettings.Ports "22/tcp") 0).HostPort}}'" minikube
I1129 07:27:56.354568   31296 sshutil.go:53] new ssh client: &{IP:127.0.0.1 Port:32772 SSHKeyPath:/home/flynn/.minikube/machines/minikube/id_rsa Username:docker}
I1129 07:27:56.445251   31296 kapi.go:248] "coredns" deployment in "kube-system" namespace and "minikube" context rescaled to 1 replicas
I1129 07:27:56.445306   31296 start.go:223] Will wait 6m0s for node &{Name: IP:192.168.49.2 Port:8443 KubernetesVersion:v1.28.3 ContainerRuntime:docker ControlPlane:true Worker:true}
I1129 07:27:56.488676   31296 out.go:177] 🔎  Verifying Kubernetes components...
I1129 07:27:56.556751   31296 ssh_runner.go:195] Run: sudo systemctl is-active --quiet service kubelet
I1129 07:27:56.501678   31296 ssh_runner.go:195] Run: sudo KUBECONFIG=/var/lib/minikube/kubeconfig /var/lib/minikube/binaries/v1.28.3/kubectl apply -f /etc/kubernetes/addons/storageclass.yaml
I1129 07:27:56.504577   31296 ssh_runner.go:195] Run: sudo KUBECONFIG=/var/lib/minikube/kubeconfig /var/lib/minikube/binaries/v1.28.3/kubectl apply -f /etc/kubernetes/addons/storage-provisioner.yaml
I1129 07:27:57.115659   31296 ssh_runner.go:235] Completed: /bin/bash -c "sudo /var/lib/minikube/binaries/v1.28.3/kubectl --kubeconfig=/var/lib/minikube/kubeconfig -n kube-system get configmap coredns -o yaml | sed -e '/^        forward . \/etc\/resolv.conf.*/i \        hosts {\n           192.168.49.1 host.minikube.internal\n           fallthrough\n        }' -e '/^        errors *$/i \        log' | sudo /var/lib/minikube/binaries/v1.28.3/kubectl --kubeconfig=/var/lib/minikube/kubeconfig replace -f -": (1.063604046s)
I1129 07:27:57.115687   31296 start.go:926] {"host.minikube.internal": 192.168.49.1} host record injected into CoreDNS's ConfigMap
I1129 07:27:57.116565   31296 api_server.go:52] waiting for apiserver process to appear ...
I1129 07:27:57.116642   31296 ssh_runner.go:195] Run: sudo pgrep -xnf kube-apiserver.*minikube.*
I1129 07:27:57.555401   31296 api_server.go:72] duration metric: took 1.110030237s to wait for apiserver process to appear ...
I1129 07:27:57.555420   31296 api_server.go:88] waiting for apiserver healthz status ...
I1129 07:27:57.555484   31296 api_server.go:253] Checking apiserver healthz at https://192.168.49.2:8443/healthz ...
I1129 07:27:57.575812   31296 api_server.go:279] https://192.168.49.2:8443/healthz returned 200:
ok
I1129 07:27:57.578013   31296 api_server.go:141] control plane version: v1.28.3
I1129 07:27:57.578032   31296 api_server.go:131] duration metric: took 22.593586ms to wait for apiserver health ...
I1129 07:27:57.578048   31296 system_pods.go:43] waiting for kube-system pods to appear ...
I1129 07:27:57.641220   31296 out.go:177] 🌟  Enabled addons: storage-provisioner, default-storageclass
I1129 07:27:57.775532   31296 addons.go:502] enable addons completed in 2.041338472s: enabled=[storage-provisioner default-storageclass]
I1129 07:27:57.787476   31296 system_pods.go:59] 5 kube-system pods found
I1129 07:27:57.787519   31296 system_pods.go:61] "etcd-minikube" [00d452f5-1ab2-4122-a591-691219832a24] Running / Ready:ContainersNotReady (containers with unready status: [etcd]) / ContainersReady:ContainersNotReady (containers with unready status: [etcd])
I1129 07:27:57.787544   31296 system_pods.go:61] "kube-apiserver-minikube" [b616fdba-189b-4b5b-988f-4d95260f4a8b] Running / Ready:ContainersNotReady (containers with unready status: [kube-apiserver]) / ContainersReady:ContainersNotReady (containers with unready status: [kube-apiserver])
I1129 07:27:57.787563   31296 system_pods.go:61] "kube-controller-manager-minikube" [093f4c65-3753-440b-97b7-452341168372] Running
I1129 07:27:57.787585   31296 system_pods.go:61] "kube-scheduler-minikube" [3be3c49b-be22-4092-b373-0d6ff90f0291] Running / Ready:ContainersNotReady (containers with unready status: [kube-scheduler]) / ContainersReady:ContainersNotReady (containers with unready status: [kube-scheduler])
I1129 07:27:57.787603   31296 system_pods.go:61] "storage-provisioner" [5efd532b-8e1f-49dd-ba8e-f83511746dcf] Pending: PodScheduled:Unschedulable (0/1 nodes are available: 1 node(s) had untolerated taint {node.kubernetes.io/not-ready: }. preemption: 0/1 nodes are available: 1 Preemption is not helpful for scheduling..)
I1129 07:27:57.787623   31296 system_pods.go:74] duration metric: took 209.556825ms to wait for pod list to return data ...
I1129 07:27:57.787650   31296 kubeadm.go:581] duration metric: took 1.342282293s to wait for : map[apiserver:true system_pods:true] ...
I1129 07:27:57.787678   31296 node_conditions.go:102] verifying NodePressure condition ...
I1129 07:27:57.800226   31296 node_conditions.go:122] node storage ephemeral capacity is 133048136Ki
I1129 07:27:57.800266   31296 node_conditions.go:123] node cpu capacity is 8
I1129 07:27:57.800303   31296 node_conditions.go:105] duration metric: took 12.598362ms to run NodePressure ...
I1129 07:27:57.800326   31296 start.go:228] waiting for startup goroutines ...
I1129 07:27:57.800344   31296 start.go:233] waiting for cluster config update ...
I1129 07:27:57.800373   31296 start.go:242] writing updated cluster config ...
I1129 07:27:57.800820   31296 ssh_runner.go:195] Run: rm -f paused
I1129 07:28:01.386823   31296 start.go:600] kubectl: 1.28.4, cluster: 1.28.3 (minor skew: 0)
I1129 07:28:01.428427   31296 out.go:177] 🏄  Done! kubectl is now configured to use "minikube" cluster and "default" namespace by default

* 
